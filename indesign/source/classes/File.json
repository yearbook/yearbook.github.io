{
  "name": "File",
  "dynamic": true,
  "shortdesc": "Represents a file in the local file system in a platform-independent manner.",
  "elements": [
    {
      "type": "constructor",
      "method": [
        {
          "name": "File",
          "shortdesc": "Creates and returns a new File object referring to a given file system location.",
          "parameters": {
            "parameter": [
              {
                "name": "path",
                "optional": true,
                "shortdesc": "The full or partial path name of the file,  in platform-specific or URI format.",
                "description": {
                  "li": [
                    "The File function returns a Folder object instead of a File object.",
                    "The new operator returns a File object for a nonexisting file with the same name."
                  ]
                },
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "File"
          },
          "example": "new File&amp;&#35;40;path&#41;"
        }
      ]
    },
    {
      "type": "class",
      "property": [
        {
          "name": "fs",
          "rwaccess": "readonly",
          "shortdesc": "The name of the file system.",
          "description": "This is a class property accessed through the File constructor. Valid values are &quot;Windows\", \"Macintosh\", and \"Unix\".",
          "datatype": {
            "type": "string"
          }
        }
      ],
      "method": [
        {
          "name": "encode",
          "shortdesc": "Encodes a string as required by RFC 2396, and returns the encoded string.",
          "description": {
            "br": [
              {},
              {}
            ],
            "a": {
              "href": "#/global/instance/encodeURI",
              "$t": "encodeURI&amp;&#35;40;&#41;"
            }
          },
          "parameters": {
            "parameter": [
              {
                "name": "name",
                "shortdesc": "The string to encode.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "decode",
          "shortdesc": "Decodes a UTF-8 encoded string as required by RFC 2396, and returns the decoded string.",
          "description": {
            "a": {
              "href": "#/String/class/decodeURI",
              "$t": "String.decodeURI&amp;&#35;40;&#41;"
            }
          },
          "parameters": {
            "parameter": [
              {
                "name": "uri",
                "shortdesc": "The UTF-8 encoded string to decode.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "isEncodingAvailable",
          "shortdesc": "Reports whether a given encoding is available.",
          "parameters": {
            "parameter": [
              {
                "name": "name",
                "shortdesc": "The encoding name.",
                "description": {
                  "i": "JavaScript Tools Guide"
                },
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "openDialog",
          "shortdesc": "Opens a dialog so the user can select one or more files to open.",
          "description": {
            "li": [
              "If the user clicks OK, returns a File object for the selected file, or an array of objects if multiple files are selected.",
              "If the user cancels, returns null."
            ]
          },
          "parameters": {
            "parameter": [
              {
                "name": "prompt",
                "shortdesc": "The prompt text, displayed if the dialog allows a prompt.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "filter",
                "optional": true,
                "shortdesc": "A filter that limits the types of files displayed in the dialog.",
                "description": {
                  "li": [
                    "In Windows,  a filter expression such as &quot;Javascript files:*.jsx;All files:*.*\".",
                    "In Mac OS, a filter function that takes a File instance and returns true if the file should be included in the display, false if it should not."
                  ]
                },
                "datatype": {
                  "type": "any",
                  "value": "null"
                }
              },
              {
                "name": "multiSelect",
                "optional": true,
                "shortdesc": "When true, the user can select multiple files and the return value is an array.",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          },
          "datatype": {
            "type": "File"
          }
        },
        {
          "name": "saveDialog",
          "shortdesc": "Opens a dialog so the user can select a file name to save to.",
          "description": {
            "li": [
              "If the user clicks OK, returns a File object for the selected file location.",
              "If the user cancels, returns null."
            ]
          },
          "parameters": {
            "parameter": [
              {
                "name": "prompt",
                "shortdesc": "The prompt text, displayed if the dialog allows a prompt.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "filter",
                "optional": true,
                "shortdesc": "In Windows only, a filter that limits the types of files displayed in the dialog.",
                "description": "In Windows only,  a filter expression such as &quot;Javascript files:*.jsx;All files:*.*\". Not used In Mac OS.",
                "datatype": {
                  "type": "any",
                  "value": "null"
                }
              }
            ]
          },
          "datatype": {
            "type": "File"
          }
        }
      ]
    },
    {
      "type": "instance",
      "property": [
        {
          "name": "alias",
          "rwaccess": "readonly",
          "shortdesc": "If true, the object refers to a file system alias or shortcut.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "created",
          "rwaccess": "readonly",
          "shortdesc": "The creation date of the referenced file, or null if the object does not refer to a file on disk.",
          "datatype": {
            "type": "Date"
          }
        },
        {
          "name": "error",
          "shortdesc": "A string containing a message describing the most recent file system error.",
          "description": "Typically set by the file system, but a script can set it. Setting this value clears any error message and resets the error bit for opened files. Contains the empty string if there is no error.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "exists",
          "rwaccess": "readonly",
          "shortdesc": "If true, this object refers to a file or file-system alias that actually exists in the file system.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "fsName",
          "rwaccess": "readonly",
          "shortdesc": "The platform-specific full path name for the referenced file.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "fullName",
          "rwaccess": "readonly",
          "shortdesc": "The full path name for the referenced file in URI notation.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "absoluteURI",
          "rwaccess": "readonly",
          "shortdesc": "The full path name for the referenced file in URI notation.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "relativeURI",
          "rwaccess": "readonly",
          "shortdesc": "The path name for the object in URI notation, relative to the current folder.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "modified",
          "rwaccess": "readonly",
          "shortdesc": "The date of the referenced file&apos;s last modification, or null if the object does not refer to a file on the disk.",
          "datatype": {
            "type": {
              "href": "#/Date",
              "$t": "Date"
            }
          }
        },
        {
          "name": "name",
          "rwaccess": "readonly",
          "shortdesc": "The file name portion of the absolute URI for the referenced file, without the path specification.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "displayName",
          "rwaccess": "readonly",
          "shortdesc": "The localized name of the referenced file, without the path specification.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "path",
          "rwaccess": "readonly",
          "shortdesc": "The path portion of the absolute URI for the referenced file, without the file name.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "parent",
          "rwaccess": "readonly",
          "shortdesc": "The Folder object for the folder that contains this file.",
          "datatype": {
            "type": {
              "href": "#/Folder",
              "$t": "Folder"
            }
          }
        },
        {
          "name": "type",
          "rwaccess": "readonly",
          "shortdesc": "The file type as a four-character string.",
          "description": {
            "li": [
              "In Mac OS, the Mac OS file type.",
              "In Windows, &quot;appl\" for .EXE files, \"shlb\" for .DLL files and \"TEXT\" for any other file."
            ]
          },
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "creator",
          "rwaccess": "readonly",
          "shortdesc": "In Mac OS, the file creator as a four-character string. In Windows or UNIX, value is &quot;????\".",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "hidden",
          "shortdesc": "When true, the file is not shown in the platform-specific file browser.",
          "description": "If the object references a file-system alias or shortcut, the flag is altered on the alias, not on the original file.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "readonly",
          "shortdesc": "When true, prevents the file from being altered or deleted.",
          "description": "If the referenced file is a file-system alias or shortcut, the flag is altered on the alias, not on the original file.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "lineFeed",
          "shortdesc": "How line feed characters are written in the file system.",
          "description": "One of the values &quot;Windows\", \"Macintosh\", or \"Unix\".",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "length",
          "shortdesc": "The size of the file in bytes.",
          "description": "Can be set only for a file that is not open, in which case it truncates or pads the file with 0-bytes to the new length.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "encoding",
          "shortdesc": "Gets or sets the encoding for subsequent read/write operations.",
          "description": {
            "i": "JavaScript Tools Guide",
            "br": {}
          },
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "eof",
          "rwaccess": "readonly",
          "shortdesc": "When true, a read attempt caused the current position to be at the end of the file, or the file is not open.",
          "datatype": {
            "type": "bool"
          }
        }
      ],
      "method": [
        {
          "name": "resolve",
          "shortdesc": "Attempts to resolve the file-system alias or shortcut that this object refers to.",
          "description": "If successful, creates and returns a new File object that points to the resolved file system element. Returns null if this object does not refer to an alias, or if the alias could not be resolved.",
          "datatype": {
            "type": "File"
          }
        },
        {
          "name": "rename",
          "shortdesc": "Renames the associated file.",
          "description": "Does not resolve aliases, but renames the referenced alias or shortcut file itself. Returns true if the file was successfully renamed.",
          "parameters": {
            "parameter": [
              {
                "name": "newName",
                "shortdesc": "The new file name, with no path information.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "bool"
          },
          "example": "aFile.rename&amp;&#35;40;newName&#41;"
        },
        {
          "name": "remove",
          "shortdesc": "Deletes the file associated with this object from disk immediately, without moving it to the system trash.",
          "description": {
            "li": "IMPORTANT: Cannot be undone. It is recommended that you prompt the user for permission before deleting."
          },
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "changePath",
          "shortdesc": "Changes the path specification of the referenced file.",
          "parameters": {
            "parameter": [
              {
                "name": "path",
                "shortdesc": "A string containing the new path, absolute or relative to the current folder.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "bool"
          },
          "example": "file.changePath &amp;&#35;40;&quot;..\"&#41;;"
        },
        {
          "name": "getRelativeURI",
          "shortdesc": "Retrieves and returns the path for this file, relative to the specified base path, in URI notation.",
          "description": "If no base path is supplied, the URI is relative to the path of the current folder.  Returns a string containing the relative URI.",
          "parameters": {
            "parameter": [
              {
                "name": "basePath",
                "shortdesc": "A base path in URI notation.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "string"
          },
          "example": "aFile.getRelativeURI&amp;&#35;40;basePath&#41;"
        },
        {
          "name": "execute",
          "shortdesc": "Executes or opens this file using the appropriate application, as if it had been double-clicked in a file browser.",
          "description": {
            "br": {}
          },
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "openDlg",
          "shortdesc": "Opens the built-in platform-specific file-browsing dialog, in which the user can select an existing file or files, and creates new File objects to represent the selected files.",
          "description": {
            "li": [
              "If the user clicks OK, returns a File or Folder object for the selected file or folder, or an array of objects.",
              "If the user cancels, returns null."
            ]
          },
          "parameters": {
            "parameter": [
              {
                "name": "prompt",
                "shortdesc": "A string containing the prompt text, if the dialog allows a prompt.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "filter",
                "optional": true,
                "shortdesc": "A filter that limits the types of files displayed in the dialog.",
                "description": {
                  "li": [
                    "In Windows,  a filter expression such as &quot;Javascript files:*.jsx;All files:*.*\".",
                    "In Mac OS, a filter function that takes a File instance and returns true if the file should be included in the display, false if it should not."
                  ]
                },
                "datatype": {
                  "type": "any",
                  "value": "null"
                }
              },
              {
                "name": "multiSelect",
                "optional": true,
                "shortdesc": "When true, the user can select multiple files and the return value is an array.",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          },
          "datatype": {
            "type": "File"
          }
        },
        {
          "name": "saveDlg",
          "shortdesc": "Opens the built-in platform-specific file-browsing dialog, in which the user can select an existing file location to which to save information, and creates a new File object to represent the selected file.",
          "description": {
            "a": {
              "href": "#/File/class/saveDialog",
              "$t": "saveDialog&amp;&#35;40;&#41;"
            },
            "li": [
              "If the user clicks OK, returns a File object for the selected file.",
              "If the user cancels, returns null."
            ]
          },
          "parameters": {
            "parameter": [
              {
                "name": "prompt",
                "shortdesc": "A string containing the prompt text, if the dialog allows a prompt.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "filter",
                "optional": true,
                "shortdesc": "In Windows only, a filter that limits the types of files displayed in the dialog.",
                "description": "In Windows only,  a filter expression such as &quot;Javascript files:*.jsx;All files:*.*\". Not used In Mac OS.",
                "datatype": {
                  "type": "any",
                  "value": "null"
                }
              }
            ]
          },
          "datatype": {
            "type": "File"
          }
        },
        {
          "name": "toString",
          "shortdesc": "Converts this object to a string.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "toSource",
          "shortdesc": "Creates and returns a serialized string representation of this object.",
          "description": {
            "a": {
              "href": "#/global/instance/eval",
              "$t": "eval&amp;&#35;40;&#41;"
            }
          },
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "createAlias",
          "shortdesc": "Makes this file a file-system alias or shortcut to the specified file.",
          "description": "The referenced file for this object must not yet exist on disk. Returns true if the operation was successful.",
          "parameters": {
            "parameter": [
              {
                "name": "path",
                "shortdesc": "A string containing the path of the target file.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          }
        },
        {
          "name": "open",
          "shortdesc": "Opens the referenced file for subsequent read/write operations. The method resolves any aliases to find the file.",
          "description": {
            "br": [
              {},
              {}
            ]
          },
          "parameters": {
            "parameter": [
              {
                "name": "mode",
                "shortdesc": "The read-write mode, a single-character string.",
                "description": {
                  "li": [
                    "r &amp;&#35;40;read&#41; Opens for reading. If the file does not exist or cannot be found, the call fails.",
                    "w &amp;&#35;40;write&#41; Opens a file for writing. If the file exists, its contents are destroyed. If the file does not exist, creates a new, empty file.",
                    "e &amp;&#35;40;edit&#41; Opens an existing file for reading and writing.",
                    "a &amp;&#35;40;append&#41; Opens an existing file for reading and writing, and moves the current position to the end of the file."
                  ]
                },
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "type",
                "optional": true,
                "shortdesc": "In Mac OS, the type of a newly created file, a 4-character string. Ignored in Windows and UNIX.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "creator",
                "optional": true,
                "shortdesc": "In Mac OS, the creator of a newly created file, a 4-character string. Ignored in Windows and UNIX.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "bool"
          },
          "example": "aFile.open&amp;&#35;40;mode, type, creator&#41;"
        },
        {
          "name": "close",
          "shortdesc": "Closes this open file.",
          "description": "Returns true if the file was closed successfully, false if an I/O error occurred.",
          "datatype": {
            "type": "bool"
          },
          "example": "aFile.close&amp;&#35;40;&#41;"
        },
        {
          "name": "read",
          "shortdesc": "Reads the contents of the file, starting at the current position.",
          "description": "Returns a string that contains up to the specified number of characters. If a number of characters is not supplied, reads from the current position to the end of the file. If the file is encoded, multiple bytes might be read to create single Unicode characters.",
          "parameters": {
            "parameter": [
              {
                "name": "chars",
                "optional": true,
                "shortdesc": "An integer specifying the number of characters to read.",
                "datatype": {
                  "type": "number"
                }
              }
            ]
          },
          "datatype": {
            "type": "string"
          },
          "example": "aFile.read&amp;&#35;40;chars&#41;"
        },
        {
          "name": "readch",
          "shortdesc": "Reads a single text character from the file at the current position.",
          "description": "Line feeds are recognized as CR, LF, CRLF or LFCR pairs.  If the file is encoded, multiple bytes might be read to create a single Unicode character. Returns a string that contains the character.",
          "datatype": {
            "type": "string"
          },
          "example": "aFile.readch&amp;&#35;40;&#41;"
        },
        {
          "name": "readln",
          "shortdesc": "Reads a single line of text from the file at the current position.",
          "description": "Line feeds are recognized as CR, LF, CRLF or LFCR pairs.. If the file is encoded, multiple bytes might be read to create single Unicode characters. Returns a string that contains the text.",
          "datatype": {
            "type": "string"
          },
          "example": "aFile.readln&amp;&#35;40;&#41;"
        },
        {
          "name": "write",
          "shortdesc": "Writes the specified text to the file at the current position.",
          "description": {
            "i": "text",
            "br": [
              {},
              {}
            ]
          },
          "parameters": {
            "parameter": [
              {
                "name": "text",
                "shortdesc": "A text string to be written.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "bool"
          },
          "example": "aFile.write&amp;&#35;40;text, ...&#41;"
        },
        {
          "name": "writeln",
          "shortdesc": "Writes a string to the file at the current position and appends a line-feed sequence.",
          "description": {
            "i": [
              "text",
              "linefeed"
            ],
            "br": [
              {},
              {}
            ]
          },
          "parameters": {
            "parameter": [
              {
                "name": "text",
                "shortdesc": "A text string to be written.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "bool"
          },
          "example": "aFile.writeln&amp;&#35;40;text, ...&#41;"
        },
        {
          "name": "seek",
          "shortdesc": "Seeks to a given position in the file.",
          "description": "The new position cannot be less than 0 or greater than the current file size. Returns true if the position was changed.",
          "parameters": {
            "parameter": [
              {
                "name": "pos",
                "shortdesc": {
                  "i": "mode"
                },
                "datatype": {
                  "type": "number"
                }
              },
              {
                "name": "mode",
                "optional": true,
                "shortdesc": "The seek mode.",
                "description": {
                  "li": [
                    "0: Seek to absolute position, where pos=0 is the first byte of the file. This is the default.",
                    "1: Seek relative to the current position.",
                    "2. Seek backward from the end of the file."
                  ]
                },
                "datatype": {
                  "type": "number",
                  "min": 0,
                  "max": 2,
                  "value": 0
                }
              }
            ]
          },
          "datatype": {
            "type": "bool"
          },
          "example": "aFile.seek&amp;&#35;40;pos, mode&#41;"
        },
        {
          "name": "tell",
          "shortdesc": "Retrieves the current position as a byte offset from the start of the file.",
          "description": "Returns a number, the position index.",
          "datatype": {
            "type": "number"
          },
          "example": "aFile.tell&amp;&#35;40;&#41;"
        },
        {
          "name": "copy",
          "shortdesc": "Copies this object’s referenced file to the specified target location.",
          "description": "Resolves any aliases to find the source file. If a file exists at the target location, it is overwritten.Returns true if the copy was successful.",
          "parameters": {
            "parameter": [
              {
                "name": "target",
                "shortdesc": "A string with the URI path to the target location, or a File object that references the target location.",
                "datatype": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "File"
                  }
                ]
              }
            ]
          },
          "datatype": {
            "type": "bool"
          },
          "example": "aFile.copy&amp;&#35;40;target&#41;"
        }
      ]
    }
  ]
}