{
  "name": "MasterSpread",
  "dynamic": true,
  "shortdesc": "A master spread.",
  "elements": [
    {
      "type": "instance",
      "property": [
        {
          "name": "name",
          "rwaccess": "readonly",
          "shortdesc": "The name of the MasterSpread.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "allPageItems",
          "rwaccess": "readonly",
          "shortdesc": "Lists all page items contained by the MasterSpread.",
          "datatype": {
            "type": "PageItem",
            "array": true
          }
        },
        {
          "name": "allGraphics",
          "rwaccess": "readonly",
          "shortdesc": "Lists all graphics contained by the MasterSpread.",
          "datatype": {
            "type": "Graphic",
            "array": true
          }
        },
        {
          "name": "timingSettings",
          "rwaccess": "readonly",
          "shortdesc": "The object timing settings.",
          "datatype": {
            "type": "TimingSetting"
          }
        },
        {
          "name": "id",
          "rwaccess": "readonly",
          "shortdesc": "The unique ID of the MasterSpread.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "isValid",
          "rwaccess": "readonly",
          "shortdesc": "Returns true if the object specifier resolves to valid objects.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "parent",
          "rwaccess": "readonly",
          "shortdesc": "The parent of the MasterSpread &amp;&#35;40;a Document&#41;.",
          "datatype": {
            "type": "Document"
          }
        },
        {
          "name": "index",
          "rwaccess": "readonly",
          "shortdesc": "The index of the MasterSpread within its containing object.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "pages",
          "rwaccess": "readonly",
          "shortdesc": "A collection of pages.",
          "datatype": {
            "type": "Pages"
          }
        },
        {
          "name": "ovals",
          "rwaccess": "readonly",
          "shortdesc": "A collection of ellipses.",
          "datatype": {
            "type": "Ovals"
          }
        },
        {
          "name": "splineItems",
          "rwaccess": "readonly",
          "shortdesc": "The spline items collection.",
          "datatype": {
            "type": "SplineItems"
          }
        },
        {
          "name": "pageItems",
          "rwaccess": "readonly",
          "shortdesc": "The page items collection, which can be used to process all page items in a container &amp;&#35;40;such as a document, page, or group&#41;, regardless of type.",
          "datatype": {
            "type": "PageItems"
          }
        },
        {
          "name": "rectangles",
          "rwaccess": "readonly",
          "shortdesc": "A collection of rectangles.",
          "datatype": {
            "type": "Rectangles"
          }
        },
        {
          "name": "graphicLines",
          "rwaccess": "readonly",
          "shortdesc": "A collection of graphic lines.",
          "datatype": {
            "type": "GraphicLines"
          }
        },
        {
          "name": "textFrames",
          "rwaccess": "readonly",
          "shortdesc": "A collection of text frames.",
          "datatype": {
            "type": "TextFrames"
          }
        },
        {
          "name": "polygons",
          "rwaccess": "readonly",
          "shortdesc": "A collection of polygons.",
          "datatype": {
            "type": "Polygons"
          }
        },
        {
          "name": "events",
          "rwaccess": "readonly",
          "shortdesc": "A collection of events.",
          "datatype": {
            "type": "Events"
          }
        },
        {
          "name": "eventListeners",
          "rwaccess": "readonly",
          "shortdesc": "A collection of event listeners.",
          "datatype": {
            "type": "EventListeners"
          }
        },
        {
          "name": "guides",
          "rwaccess": "readonly",
          "shortdesc": "A collection of guides.",
          "datatype": {
            "type": "Guides"
          }
        },
        {
          "name": "groups",
          "rwaccess": "readonly",
          "shortdesc": "A collection of groups.",
          "datatype": {
            "type": "Groups"
          }
        },
        {
          "name": "epstexts",
          "rwaccess": "readonly",
          "shortdesc": "EPSTexts",
          "datatype": {
            "type": "EPSTexts"
          }
        },
        {
          "name": "formFields",
          "rwaccess": "readonly",
          "shortdesc": "A collection of form fields.",
          "datatype": {
            "type": "FormFields"
          }
        },
        {
          "name": "buttons",
          "rwaccess": "readonly",
          "shortdesc": "A collection of buttons.",
          "datatype": {
            "type": "Buttons"
          }
        },
        {
          "name": "multiStateObjects",
          "rwaccess": "readonly",
          "shortdesc": "A collection of multi-state objects.",
          "datatype": {
            "type": "MultiStateObjects"
          }
        },
        {
          "name": "checkBoxes",
          "rwaccess": "readonly",
          "shortdesc": "A collection of checkboxes.",
          "datatype": {
            "type": "CheckBoxes"
          }
        },
        {
          "name": "comboBoxes",
          "rwaccess": "readonly",
          "shortdesc": "A collection of comboboxes.",
          "datatype": {
            "type": "ComboBoxes"
          }
        },
        {
          "name": "listBoxes",
          "rwaccess": "readonly",
          "shortdesc": "A collection of listboxes.",
          "datatype": {
            "type": "ListBoxes"
          }
        },
        {
          "name": "radioButtons",
          "rwaccess": "readonly",
          "shortdesc": "A collection of radio buttons.",
          "datatype": {
            "type": "RadioButtons"
          }
        },
        {
          "name": "textBoxes",
          "rwaccess": "readonly",
          "shortdesc": "A collection of text boxes.",
          "datatype": {
            "type": "TextBoxes"
          }
        },
        {
          "name": "signatureFields",
          "rwaccess": "readonly",
          "shortdesc": "A collection of signature fields.",
          "datatype": {
            "type": "SignatureFields"
          }
        },
        {
          "name": "preferences",
          "rwaccess": "readonly",
          "shortdesc": "A collection of preferences objects.",
          "datatype": {
            "type": "Preferences"
          }
        },
        {
          "name": "pageColor",
          "shortdesc": "The color label of the MasterSpread, specified either as  an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Can return: Array of 3 Reals &amp;&#35;40;0 - 255&#41; or UIColors enumerator or PageColorOptions enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "namePrefix",
          "shortdesc": "The prefix of the master spread name.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "baseName",
          "shortdesc": "The name of the master spread.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "showMasterItems",
          "shortdesc": "If true, displays master page items on document pages in the spread.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "appliedMaster",
          "shortdesc": "The master spread applied to the MasterSpread. Can also accept: NothingEnum enumerator.",
          "datatype": {
            "type": "MasterSpread"
          }
        },
        {
          "name": "primaryTextFrame",
          "shortdesc": "The primary text frame through which text flows on the MasterSpread. Must be a text frame or a type on a path spline. Can also accept: NothingEnum enumerator.",
          "datatype": {
            "type": "PageItem"
          }
        },
        {
          "name": "idmlComponentName",
          "shortdesc": "The IDML component name of the MasterSpread.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "label",
          "shortdesc": "A property that can be set to any string.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "properties",
          "shortdesc": "A property that allows setting of several properties at the same time.",
          "datatype": {
            "type": "Object"
          }
        }
      ],
      "method": [
        {
          "name": "duplicate",
          "shortdesc": "Duplicates the spread.",
          "parameters": {
            "parameter": [
              {
                "name": "to",
                "optional": true,
                "shortdesc": "The location of the spread relative to the reference object or within the document. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "LocationOptions",
                  "value": "LocationOptions.AT_END"
                }
              },
              {
                "name": "reference",
                "shortdesc": "The reference object. Note: Required only when the to parameter specifies before or after. Can accept: MasterSpread, Document or MasterSpread. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "mixed"
                }
              }
            ]
          },
          "datatype": {
            "type": "varies=any"
          }
        },
        {
          "name": "placeAndLink",
          "shortdesc": "Deprecated: Use contentPlace method. Original Description: Create a linked story and place it into the target.",
          "parameters": {
            "parameter": [
              {
                "name": "parentStory",
                "shortdesc": "The story to place and link from.",
                "datatype": {
                  "type": "Story"
                }
              },
              {
                "name": "placePoint",
                "shortdesc": "The point at which to place &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any",
                  "array": {}
                }
              },
              {
                "name": "destinationLayer",
                "shortdesc": "The layer on which to place &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "Layer"
                }
              },
              {
                "name": "showingOptions",
                "optional": true,
                "shortdesc": "Whether to display the link options dialog &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          },
          "datatype": {
            "type": "Story"
          }
        },
        {
          "name": "place",
          "shortdesc": "Places the file.",
          "parameters": {
            "parameter": [
              {
                "name": "fileName",
                "shortdesc": "The file to place",
                "datatype": {
                  "type": "File"
                }
              },
              {
                "name": "placePoint",
                "shortdesc": "The point at which to place &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any",
                  "array": {}
                }
              },
              {
                "name": "destinationLayer",
                "shortdesc": "The layer on which to place &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "Layer"
                }
              },
              {
                "name": "showingOptions",
                "optional": true,
                "shortdesc": "Whether to display the import options dialog &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              },
              {
                "name": "autoflowing",
                "optional": true,
                "shortdesc": "Whether to autoflow placed text &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              },
              {
                "name": "withProperties",
                "shortdesc": "Initial values for properties of the placed object&amp;&#35;40;s&#41; (Optional)",
                "datatype": {
                  "type": "Object"
                }
              }
            ]
          },
          "datatype": {
            "type": "varies=any",
            "array": {}
          }
        },
        {
          "name": "remove",
          "shortdesc": "Deletes the MasterSpread."
        },
        {
          "name": "removeOverride",
          "shortdesc": "Removes the override from a previously overridden master page item."
        },
        {
          "name": "detach",
          "shortdesc": "Detaches an overridden master page item from the master page."
        },
        {
          "name": "select",
          "shortdesc": "Selects the object.",
          "parameters": {
            "parameter": [
              {
                "name": "existingSelection",
                "optional": true,
                "shortdesc": "The selection status of the MasterSpread in relation to previously selected objects. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "SelectionOptions",
                  "value": "SelectionOptions.REPLACE_WITH"
                }
              }
            ]
          }
        },
        {
          "name": "createGuides",
          "shortdesc": "Creates multiple guides on all pages of the spread.",
          "parameters": {
            "parameter": [
              {
                "name": "numberOfRows",
                "optional": true,
                "shortdesc": "The number of rows to create on each page. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "number",
                  "min": 0,
                  "max": 40,
                  "value": 0
                }
              },
              {
                "name": "numberOfColumns",
                "optional": true,
                "shortdesc": "The number of columns to create on each page.  &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "number",
                  "min": 0,
                  "max": 40,
                  "value": 0
                }
              },
              {
                "name": "rowGutter",
                "optional": true,
                "shortdesc": "The height of the gutter between rows. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any",
                  "min": 0,
                  "max": 1440,
                  "value": 0
                }
              },
              {
                "name": "columnGutter",
                "optional": true,
                "shortdesc": "The width of the gutter between columns. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any",
                  "min": 0,
                  "max": 1440,
                  "value": 0
                }
              },
              {
                "name": "guideColor",
                "shortdesc": "The color to make the guides, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Can accept: Array of 3 Reals &amp;&#35;40;0 - 255&#41; or UIColors enumerator. (Optional)",
                "datatype": {
                  "type": "mixed"
                }
              },
              {
                "name": "fitMargins",
                "optional": true,
                "shortdesc": "If true, the row height and column width are calculated based on the space within the page margins. If false, row height and column width are calculated based on the full page. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              },
              {
                "name": "removeExisting",
                "optional": true,
                "shortdesc": "If true, removes existing guides when creating new ones. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              },
              {
                "name": "layer",
                "shortdesc": "The layer on which to create the guides. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "Layer"
                }
              }
            ]
          }
        },
        {
          "name": "transform",
          "shortdesc": "Transform the page item.",
          "parameters": {
            "parameter": [
              {
                "name": "in",
                "shortdesc": "The coordinate space to use",
                "datatype": {
                  "type": "CoordinateSpaces"
                }
              },
              {
                "name": "from",
                "shortdesc": "The temporary origin during the transformation. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.",
                "datatype": {
                  "type": "mixed"
                }
              },
              {
                "name": "withMatrix",
                "shortdesc": "Transform matrix. Can accept: Array of 6 Reals or TransformationMatrix.",
                "datatype": {
                  "type": "mixed"
                }
              },
              {
                "name": "replacingCurrent",
                "shortdesc": "Transform components to consider; providing this optional parameter causes the target&apos;s existing transform components to be replaced with new values.  Without this parameter, the given matrix is concatenated onto the target's existing transform combining the effect of the two. Can accept: MatrixContent enumerator, Array of MatrixContent enumerators or Long Integer. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "mixed"
                }
              },
              {
                "name": "consideringRulerUnits",
                "optional": true,
                "shortdesc": "If true then a ruler based origin is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          }
        },
        {
          "name": "transformValuesOf",
          "shortdesc": "Get the transformation values of the page item.",
          "parameters": {
            "parameter": [
              {
                "name": "in",
                "shortdesc": "The coordinate space to use",
                "datatype": {
                  "type": "CoordinateSpaces"
                }
              }
            ]
          },
          "datatype": {
            "type": "TransformationMatrix",
            "array": {}
          }
        },
        {
          "name": "resolve",
          "shortdesc": "Get the coordinates of the given location in the specified coordinate system.",
          "parameters": {
            "parameter": [
              {
                "name": "location",
                "shortdesc": "The location requested. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.",
                "datatype": {
                  "type": "mixed"
                }
              },
              {
                "name": "in",
                "shortdesc": "The coordinate space to use.",
                "datatype": {
                  "type": "CoordinateSpaces"
                }
              },
              {
                "name": "consideringRulerUnits",
                "optional": true,
                "shortdesc": "If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          },
          "datatype": {
            "type": "varies=any"
          }
        },
        {
          "name": "contentPlace",
          "shortdesc": "Duplicate an object and place it into the target.",
          "parameters": {
            "parameter": [
              {
                "name": "pageItems",
                "shortdesc": "One or more page items to place or load",
                "datatype": {
                  "type": "PageItem",
                  "array": {}
                }
              },
              {
                "name": "linkPageItems",
                "optional": true,
                "shortdesc": "Whether to link pageItems in content placer &amp;&#35;40;if true it will override link stories value&#41; (Optional)",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              },
              {
                "name": "linkStories",
                "optional": true,
                "shortdesc": "Whether to link stories in content placer &amp;&#35;40;only applicable for single story, pageItem links will also be created in case of more than one item&#41; (Optional)",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              },
              {
                "name": "mapStyles",
                "optional": true,
                "shortdesc": "Whether to map styles in content placer &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              },
              {
                "name": "placePoint",
                "shortdesc": "The point at which to place &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any",
                  "array": {}
                }
              },
              {
                "name": "destinationLayer",
                "shortdesc": "The layer on which to place &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "Layer"
                }
              },
              {
                "name": "showingOptions",
                "optional": true,
                "shortdesc": "Whether to display the link options dialog &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          },
          "datatype": {
            "type": "varies=any",
            "array": {}
          }
        },
        {
          "name": "insertLabel",
          "shortdesc": "Sets the label to the value associated with the specified key.",
          "parameters": {
            "parameter": [
              {
                "name": "key",
                "shortdesc": "The key.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "value",
                "shortdesc": "The value.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          }
        },
        {
          "name": "extractLabel",
          "shortdesc": "Gets the label value associated with the specified key.",
          "parameters": {
            "parameter": [
              {
                "name": "key",
                "shortdesc": "The key.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "toSource",
          "shortdesc": "Generates a string which, if executed, will return the MasterSpread.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "getElements",
          "shortdesc": "Resolves the object specifier, creating an array of object references.",
          "datatype": {
            "type": "MasterSpread",
            "array": {}
          }
        },
        {
          "name": "toSpecifier",
          "shortdesc": "Retrieves the object specifier.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "addEventListener",
          "shortdesc": "Adds an event listener.",
          "parameters": {
            "parameter": [
              {
                "name": "eventType",
                "shortdesc": "The event type.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "handler",
                "shortdesc": "The event handler. Can accept: File or JavaScript Function.",
                "datatype": {
                  "type": "mixed"
                }
              },
              {
                "name": "captures",
                "optional": true,
                "shortdesc": "This parameter is obsolete. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          },
          "datatype": {
            "type": "EventListener"
          }
        },
        {
          "name": "removeEventListener",
          "shortdesc": "Removes the event listener.",
          "parameters": {
            "parameter": [
              {
                "name": "eventType",
                "shortdesc": "The registered event type.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "handler",
                "shortdesc": "The registered event handler. Can accept: File or JavaScript Function.",
                "datatype": {
                  "type": "mixed"
                }
              },
              {
                "name": "captures",
                "optional": true,
                "shortdesc": "This parameter is obsolete. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          },
          "datatype": {
            "type": "bool"
          }
        }
      ]
    }
  ]
}