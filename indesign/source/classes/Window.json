{
  "name": "Window",
  "dynamic": true,
  "shortdesc": "The instance represents a top-level window or dialog box, which contains user-interface elements.",
  "elements": [
    {
      "type": "constructor",
      "method": [
        {
          "name": "Window",
          "shortdesc": "Creates a new window.",
          "parameters": [
            {
              "name": "type",
              "shortdesc": "The window type.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "title",
              "optional": true,
              "shortdesc": "The window title, a localizable string.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "bounds",
              "optional": true,
              "shortdesc": "The window's position and size.",
              "datatype": {
                "type": "Bounds"
              }
            },
            {
              "name": "properties",
              "optional": true,
              "shortdesc": "An object containing creation-only properties.",
              "datatype": {
                "type": "Object"
              }
            }
          ]
        }
      ]
    },
    {
      "type": "class",
      "property": [
        {
          "name": "frameworkName",
          "rwaccess": "readonly",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "version",
          "rwaccess": "readonly",
          "datatype": {
            "type": "Mixed"
          }
        }
      ],
      "method": [
        {
          "name": "find",
          "shortdesc": "Use this method to find an existing window.",
          "parameters": [
            {
              "name": "type",
              "shortdesc": "The name of a predefined resource available to JavaScript in the current application; or the window type.",
              "description": "If a title is specified, the type is used if more than one window with that title is found. Can be null or the empty string.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "title",
              "shortdesc": "The window title.",
              "datatype": {
                "type": "String"
              }
            }
          ],
          "datatype": {
            "type": "Window"
          }
        },
        {
          "name": "alert",
          "shortdesc": "Displays a platform-standard dialog containing a short message and an OK button.",
          "parameters": [
            {
              "name": "message",
              "shortdesc": "TThe string for the displayed message.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "title",
              "optional": true,
              "shortdesc": "A string to appear as the title of the dialog, if the platform supports a title.",
              "description": "Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is \"Script Alert\".",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "errorIcon",
              "shortdesc": "When true, the platform-standard alert icon is replaced by the platform-standard error icon in the dialog.",
              "description": "Ignored in Mac OS, which does not support icons for alert dialogs.",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ]
        },
        {
          "name": "confirm",
          "shortdesc": "Displays a platform-standard dialog containing a short message and two buttons labeled Yes and No.",
          "description": "Returns true if the user clicked Yes, false if the user clicked No.",
          "parameters": [
            {
              "name": "message",
              "shortdesc": "The string for the displayed message.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "noAsDefault",
              "shortdesc": "When true, the No button is the default choice, selected when the user types Enter.",
              "description": "Default is false, meaning that Yes is the default choice.",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            },
            {
              "name": "title",
              "optional": true,
              "shortdesc": "A string to appear as the title of the dialog, if the platform supports a title.",
              "description": "Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is \"Script Alert\".",
              "datatype": {
                "type": "String"
              }
            }
          ],
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "prompt",
          "shortdesc": "Displays a modal dialog that returns the user’s text input.",
          "description": "Returns the value of the text edit field if the user clicked OK, null if the user clicked Cancel.",
          "parameters": [
            {
              "name": "prompt",
              "shortdesc": "The string for the displayed message.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "default",
              "optional": true,
              "shortdesc": "The initial value to be displayed in the text edit field.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "title",
              "optional": true,
              "shortdesc": "A string to appear as the title of the dialog.",
              "description": "In Windows, this appears in the window’s frame; in Mac OS it appears above the message. The default title string is \"Script Prompt\".",
              "datatype": {
                "type": "String"
              }
            }
          ],
          "datatype": {
            "type": "String"
          }
        }
      ]
    },
    {
      "type": "instance",
      "property": [
        {
          "name": "graphics",
          "rwaccess": "readonly",
          "datatype": {
            "type": "ScriptUIGraphics"
          }
        },
        {
          "name": "visible",
          "shortdesc": "When true, the element is shown, when false it is hidden.",
          "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "bounds",
          "shortdesc": "The bounds of the window's drawable area, excluding the frame, in screen coordinates.",
          "datatype": {
            "type": "Bounds"
          }
        },
        {
          "name": "frameBounds",
          "rwaccess": "readonly",
          "shortdesc": "The bounds of the window frame in screen coordinates.",
          "description": "The frame consists of the title bar and borders that enclose the content region of a window, depending on the windowing system.",
          "datatype": {
            "type": "Bounds"
          }
        },
        {
          "name": "frameLocation",
          "shortdesc": "The top left corner of the window frame in screen coordinates.",
          "datatype": {
            "type": "Point"
          }
        },
        {
          "name": "frameSize",
          "rwaccess": "readonly",
          "shortdesc": "The size and location of the window's frame in screen coordinates.",
          "datatype": {
            "type": "Dimension"
          }
        },
        {
          "name": "location",
          "shortdesc": "The upper left corner of the window's drawable area.",
          "description": "The same as [bounds.x, bounds.y].",
          "datatype": {
            "type": "Point"
          }
        },
        {
          "name": "maximumSize",
          "shortdesc": "The largest rectangle to which the window can be resized.",
          "datatype": {
            "type": "Dimension"
          }
        },
        {
          "name": "minimumSize",
          "shortdesc": "The smallest rectangle to which the window can be resized.",
          "datatype": {
            "type": "Dimension"
          }
        },
        {
          "name": "preferredSize",
          "shortdesc": "The preferred size of the window.",
          "description": "Used in automatic layout and resizing. To set a specific value for only one dimension, specify the other dimension as -1.",
          "datatype": {
            "type": "Dimension"
          }
        },
        {
          "name": "size",
          "shortdesc": "The current size and location of the content area of the window in screen coordinates.",
          "datatype": {
            "type": "Dimension"
          }
        },
        {
          "name": "windowBounds",
          "rwaccess": "readonly",
          "shortdesc": "The bounds of this window relative to the top-level parent window.",
          "datatype": {
            "type": "Bounds"
          }
        },
        {
          "name": "characters",
          "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the window.",
          "datatype": {
            "type": "Number",
            "min": 0
          }
        },
        {
          "name": "justify",
          "shortdesc": "The default text justification style for child text elements.",
          "datatype": {
            "type": "String",
            "value": "left"
          }
        },
        {
          "name": "text",
          "shortdesc": "The title, label, or displayed text, a localizeable string.",
          "description": "Does not apply to containers of type group.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "active",
          "shortdesc": "Set to true to make this window active.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "shortcutKey",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "cancelElement",
          "description": "The cancellation key is the Esc key. By default, looks for a button whose name or text is \"cancel\" &#40;case disregarded).",
          "datatype": {
            "type": "Object"
          }
        },
        {
          "name": "defaultElement",
          "description": "By default, looks for a button whose name or text is \"ok\" &#40;case disregarded).",
          "datatype": {
            "type": "Object"
          }
        },
        {
          "name": "maximized",
          "shortdesc": "True if the window is expanded.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "minimized",
          "shortdesc": "True if the window is minimized or iconified.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "alignChildren",
          "shortdesc": "Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "children",
          "rwaccess": "readonly",
          "shortdesc": "The collection of UI elements that have been added to this container.",
          "description": "An array indexed by number or by a string containing an element's name. The length property of this array is the number of child elements for container elements, and is zero for controls.",
          "datatype": {
            "type": "Object",
            "array": true
          }
        },
        {
          "name": "layout",
          "shortdesc": "The layout manager for this container.",
          "datatype": {
            "type": "LayoutManager"
          }
        },
        {
          "name": "margins",
          "shortdesc": "The number of pixels between the edges of a container and the outermost child elements.",
          "description": "You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "orientation",
          "shortdesc": "The layout orientation of children in a container.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "spacing",
          "shortdesc": "The number of pixels separating one child element from its adjacent sibling element.",
          "description": "Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "alignment",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "properties",
          "shortdesc": "An object that contains one or more creation properties of the container &#40;properties used only when the element is created).",
          "datatype": {
            "type": "Object"
          }
        },
        {
          "name": "enabled",
          "shortdesc": "True if this element is enabled.",
          "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "helpTip",
          "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "indent",
          "shortdesc": "The number of pixels to indent the element.",
          "datatype": {
            "type": "Number",
            "min": 0
          }
        },
        {
          "name": "parent",
          "rwaccess": "readonly",
          "shortdesc": "The immediate parent element.",
          "datatype": {
            "type": "Object"
          }
        },
        {
          "name": "window",
          "rwaccess": "readonly",
          "shortdesc": "The window that this element belongs to.",
          "datatype": {
            "type": "Window"
          }
        },
        {
          "name": "type",
          "rwaccess": "readonly",
          "shortdesc": "The element type; \"dialog\", \"palette\", or \"window\".",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "opacity",
          "shortdesc": "The opacity of the window, in the range [0..1].",
          "description": "A value of 1.0 &#40;the default) makes the window completely opaque, a value of 0 makes it completely transparent. Intermediate values make it partially transparent to any degree.",
          "datatype": {
            "type": "Number",
            "value": 1
          }
        }
      ],
      "method": [
        {
          "name": "show",
          "shortdesc": "Makes this window visible."
        },
        {
          "name": "hide",
          "shortdesc": "Hides this windows."
        },
        {
          "name": "notify",
          "shortdesc": "Sends a notification message to all listeners, simulating the specified user interaction event.",
          "parameters": [
            {
              "name": "eventName",
              "optional": true,
              "shortdesc": "The event name; if omitted, the default event is sent.",
              "datatype": {
                "type": "String"
              }
            }
          ]
        },
        {
          "name": "center",
          "shortdesc": "Centers this window on screen or with repect to another window.",
          "parameters": [
            {
              "name": "window",
              "optional": true,
              "shortdesc": "The relative window. If not specified, centers on the screen.",
              "datatype": {
                "type": "Window"
              }
            }
          ]
        },
        {
          "name": "close",
          "shortdesc": "Closes this window.",
          "parameters": [
            {
              "name": "return",
              "optional": true,
              "shortdesc": "A number to be returned from the show&#40;) method that invoked this window as a modal dialog.",
              "datatype": {
                "type": "Mixed"
              }
            }
          ]
        },
        {
          "name": "add",
          "shortdesc": "Creates and returns a new control or container object and adds it to the children of this window.",
          "parameters": [
            {
              "name": "type",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "bounds",
              "optional": true,
              "shortdesc": "A bounds specification that describes the size and position of the new control or container, relative to its parent.",
              "datatype": {
                "type": "Bounds"
              }
            },
            {
              "name": "text",
              "optional": true,
              "shortdesc": "The text or label, a localizable string.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "properties",
              "optional": true,
              "shortdesc": "An object that contains one or more creation properties of the new child &#40;properties used only when the element is created).",
              "datatype": {
                "type": "Object"
              }
            }
          ],
          "datatype": {
            "type": "Object"
          }
        },
        {
          "name": "remove",
          "description": "No error results if the child does not exist.",
          "parameters": [
            {
              "name": "what",
              "datatype": {
                "type": "Mixed"
              }
            }
          ]
        },
        {
          "name": "addEventListener",
          "shortdesc": "Registers an event handler for a particular type of event occuring in this window.",
          "parameters": [
            {
              "name": "eventName",
              "shortdesc": "The name of the event.",
              "description": "Predefined event names are: change, changing, move, moving, resize, resizing, show , enterKey, focus, blur, keydown, keyup, mousedown, mouseup, mousemove, mouseover, mouseout, click &#40;detail = 1 for single, 2 for double).",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "handler",
              "shortdesc": "The function that handles the event.",
              "datatype": {
                "type": "Function"
              }
            },
            {
              "name": "capturePhase",
              "optional": true,
              "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
              "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "removeEventListener",
          "shortdesc": "Unregisters an event handler for a particular type of event occuring in this window.",
          "description": "All arguments must be identical to those that were used to register the event handler.",
          "parameters": [
            {
              "name": "eventName",
              "shortdesc": "The name of the event.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "handler",
              "shortdesc": "The function that handles the event.",
              "datatype": {
                "type": "Function"
              }
            },
            {
              "name": "capturePhase",
              "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "dispatchEvent",
          "shortdesc": "Simulates the occurrence of an event in this target.",
          "datatype": {
            "type": "UIEvent"
          }
        }
      ]
    },
    {
      "type": "event",
      "method": [
        {
          "name": "onActivate",
          "shortdesc": "An event-handler callback function, called when the window acquires the keyboard focus.",
          "description": "Called when the user gives the window the keyboard focus by clicking it or otherwise making it the active window."
        },
        {
          "name": "onDeactivate",
          "shortdesc": "An event-handler callback function, called when the window loses the keyboard focus.",
          "description": "Called when the user moves the keyboard focus from the previously active window to another window."
        },
        {
          "name": "onClose",
          "shortdesc": "An event-handler callback function, called  when the window is about to be closed.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "onMove",
          "shortdesc": "An event-handler callback function, called  when the window  has been moved"
        },
        {
          "name": "onMoving",
          "shortdesc": "An event-handler callback function, called  when the window is being moved",
          "description": "Called while a window in being moved, each time the position changes. A handler can monitor the move operation."
        },
        {
          "name": "onResize",
          "shortdesc": "An event-handler callback function, called after the window has been resized"
        },
        {
          "name": "onResizing",
          "shortdesc": "An event-handler callback function, called while a window is being resized",
          "description": "Called while a window is being resized, each time the height or width changes. A handler can monitor the resize operation."
        },
        {
          "name": "onShortcutKey"
        },
        {
          "name": "onShow",
          "shortdesc": "An event-handler callback function, called just before the window is displayed"
        }
      ]
    }
  ]
}