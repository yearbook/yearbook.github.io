{
  "name": "FindTransliteratePreference",
  "dynamic": true,
  "superclass": {
    "href": "#/Preference",
    "$t": "Preference"
  },
  "shortdesc": "Find transliterate preferences.",
  "elements": [
    {
      "type": "instance",
      "property": [
        {
          "name": "bulletChar",
          "rwaccess": "readonly",
          "shortdesc": "Bullet character. Can return: Bullet or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "isValid",
          "rwaccess": "readonly",
          "shortdesc": "Returns true if the object specifier resolves to valid objects.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "parent",
          "rwaccess": "readonly",
          "shortdesc": "The parent of the FindTransliteratePreference &#40;a Application).",
          "datatype": {
            "type": "Application"
          }
        },
        {
          "name": "events",
          "rwaccess": "readonly",
          "shortdesc": "A collection of events.",
          "datatype": {
            "type": "Events"
          }
        },
        {
          "name": "eventListeners",
          "rwaccess": "readonly",
          "shortdesc": "A collection of event listeners.",
          "datatype": {
            "type": "EventListeners"
          }
        },
        {
          "name": "preferences",
          "rwaccess": "readonly",
          "shortdesc": "A collection of preferences objects.",
          "datatype": {
            "type": "Preferences"
          }
        },
        {
          "name": "findCharacterType",
          "shortdesc": "The character type to find. Can return: FindChangeTransliterateCharacterTypes enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "appliedCharacterStyle",
          "shortdesc": "The character style to search for or change to. Can return: String or NothingEnum enumerator. Can also accept: CharacterStyle.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "appliedParagraphStyle",
          "shortdesc": "The paragraph style to search for or change to. Can return: String or NothingEnum enumerator. Can also accept: ParagraphStyle.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "firstLineIndent",
          "shortdesc": "The amount to indent the first line. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "leftIndent",
          "shortdesc": "The width of the left indent. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rightIndent",
          "shortdesc": "The width of the right indent. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "spaceBefore",
          "shortdesc": "The height of the paragraph space above. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "spaceAfter",
          "shortdesc": "The height of the paragraph space below. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "balanceRaggedLines",
          "shortdesc": "If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer. Can return: Boolean, BalanceLinesStyle enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "justification",
          "shortdesc": "The paragraph alignment. Can return: Justification enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "singleWordJustification",
          "shortdesc": "The alignment to use for lines that contain a single word. Can return: SingleWordJustification enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "autoLeading",
          "shortdesc": "The percent of the type size to use for auto leading. &#40;Range: 0 to 500). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "dropCapLines",
          "shortdesc": "The number of lines to drop cap. Can return: Short Integer &#40;0 - 25) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "dropCapCharacters",
          "shortdesc": "The number of characters to drop cap. Can return: Short Integer &#40;0 - 150) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "keepLinesTogether",
          "shortdesc": "If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "keepAllLinesTogether",
          "shortdesc": "If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "keepWithNext",
          "shortdesc": "The minimum number of lines to keep with the next paragraph. Can return: Short Integer &#40;0 - 5) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "keepFirstLines",
          "shortdesc": "The minimum number of lines to keep together in a paragraph before allowing a page break. Can return: Short Integer &#40;1 - 50) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "keepLastLines",
          "shortdesc": "The minimum number of lines to keep together in a paragraph after a page break. Can return: Short Integer &#40;1 - 50) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "startParagraph",
          "shortdesc": "The location at which to start the paragraph. Can return: StartParagraph enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "composer",
          "shortdesc": "The text composer to use to compose the text. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "lastLineIndent",
          "shortdesc": "The amount to indent the last line in the paragraph. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "hyphenateLastWord",
          "shortdesc": "If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "dropcapDetail",
          "shortdesc": "Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid. Can return: Long Integer or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "hyphenateAcrossColumns",
          "shortdesc": "If true, allows the last word in a text column to be hyphenated. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "keepRuleAboveInFrame",
          "shortdesc": "If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ignoreEdgeAlignment",
          "shortdesc": "If true, ignores optical edge alignment for the paragraph. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "appliedFont",
          "shortdesc": "The font applied to the FindTransliteratePreference, specified as either a font object or the name of font family. Can return: Font, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "fontStyle",
          "shortdesc": "The name of the font style. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "pointSize",
          "shortdesc": "The text size. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "leading",
          "shortdesc": "The leading applied to the text. Can return: Unit, Leading enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kerningMethod",
          "shortdesc": "The type of pair kerning. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "tracking",
          "shortdesc": "The amount by which to loosen or tighten a block of text, specified in thousands of an em. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "capitalization",
          "shortdesc": "The capitalization scheme. Can return: Capitalization enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "position",
          "shortdesc": "The text position relative to the baseline. Can return: Position enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underline",
          "shortdesc": "If true, underlines the text. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThru",
          "shortdesc": "If true, draws a strikethrough line through the text. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ligatures",
          "shortdesc": "If true, replaces specific character combinations &#40;e.g., fl, fi) with ligature characters. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "noBreak",
          "shortdesc": "If true, keeps the text on the same line. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "horizontalScale",
          "shortdesc": "The horizontal scaling applied to the FindTransliteratePreference. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "verticalScale",
          "shortdesc": "The vertical scaling applied to the FindTransliteratePreference. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "baselineShift",
          "shortdesc": "The baseline shift applied to the text. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "skew",
          "shortdesc": "The skew angle of the FindTransliteratePreference. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "fillTint",
          "shortdesc": "The tint &#40;as a percentage) of the fill color of the FindTransliteratePreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strokeTint",
          "shortdesc": "The tint &#40;as a percentage) of the stroke color of the FindTransliteratePreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strokeWeight",
          "shortdesc": "The stroke weight applied to the characters of the text. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "overprintStroke",
          "shortdesc": "If true, the stroke of the characters will overprint. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "overprintFill",
          "shortdesc": "If true, the fill color of the characters will overprint. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfFigureStyle",
          "shortdesc": "The figure style in OpenType fonts. Can return: OTFFigureStyle enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfOrdinal",
          "shortdesc": "If true, uses ordinals in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfFraction",
          "shortdesc": "If true, uses fractions in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfDiscretionaryLigature",
          "shortdesc": "If true, uses discretionary ligatures in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfTitling",
          "shortdesc": "If true, uses titling forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfContextualAlternate",
          "shortdesc": "If true, uses contextual alternate forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfSwash",
          "shortdesc": "If true, uses swash forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineColor",
          "shortdesc": "The swatch &#40;color, gradient, tint, or mixed ink) applied to the underline stroke. . Can return: Swatch, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineGapColor",
          "shortdesc": "The swatch &#40;color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid. Can return: Swatch, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineTint",
          "shortdesc": "The underline stroke tint &#40;as a percentage). (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineGapTint",
          "shortdesc": "The tint &#40;as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineOverprint",
          "shortdesc": "If true, the underline stroke color will overprint. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineGapOverprint",
          "shortdesc": "If true, the gap color of the underline stroke will overprint. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineType",
          "shortdesc": "The stroke type of the underline stroke. Can return: StrokeStyle, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineOffset",
          "shortdesc": "The amount by which to offset the underline from the text baseline. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineWeight",
          "shortdesc": "The stroke weight of the underline stroke. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughColor",
          "shortdesc": "The swatch &#40;color, gradient, tint, or mixed ink) applied to the strikethrough stroke. Can return: Swatch, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughGapColor",
          "shortdesc": "The swatch &#40;color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke. Can return: Swatch, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughTint",
          "shortdesc": "The tint &#40;as a percentage) of the strikethrough stroke. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughGapTint",
          "shortdesc": "The tint &#40;as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughOverprint",
          "shortdesc": "If true, the strikethrough stroke will overprint. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughGapOverprint",
          "shortdesc": "If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughType",
          "shortdesc": "The stroke type of the strikethrough stroke. Can return: StrokeStyle, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughOffset",
          "shortdesc": "The amount by which to offset the strikethrough stroke from the text baseline. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughWeight",
          "shortdesc": "The stroke weight of the strikethrough stroke. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfSlashedZero",
          "shortdesc": "If true, use a slashed zeroes in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfHistorical",
          "shortdesc": "If true, use historical forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfStylisticSets",
          "shortdesc": "The stylistic sets to use in OpenType fonts. Can return: Long Integer or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gradientFillLength",
          "shortdesc": "The length &#40;for a linear gradient) or radius (for a radial gradient) applied to the fill of the text. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gradientFillAngle",
          "shortdesc": "The angle of a linear gradient applied to the fill of the text. &#40;Range: -180 to 180). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gradientStrokeLength",
          "shortdesc": "The length &#40;for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gradientStrokeAngle",
          "shortdesc": "The angle of a linear gradient applied to the stroke of the text. &#40;Range: -180 to 180). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gradientFillStart",
          "shortdesc": "The starting point &#40;in page coordinates) of a gradient applied to the fill of the text, in the format [x, y]. Can return: Array of 2 Units or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gradientStrokeStart",
          "shortdesc": "The starting point &#40;in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y]. Can return: Array of 2 Units or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfMark",
          "shortdesc": "If true, uses mark positioning in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfLocale",
          "shortdesc": "If true, uses localized forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "positionalForm",
          "shortdesc": "The OpenType positional form. Can return: PositionalForms enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "fillColor",
          "shortdesc": "The swatch &#40;color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to. Can return: String or NothingEnum enumerator. Can also accept: Swatch.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strokeColor",
          "shortdesc": "The swatch &#40;color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to. Can return: String or NothingEnum enumerator. Can also accept: Swatch.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "appliedLanguage",
          "shortdesc": "The language to search for or change to. Can return: String or NothingEnum enumerator. Can also accept: Language or LanguageWithVendors.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kerningValue",
          "shortdesc": "The amount of space to add or remove between characters, specified in thousands of an em. . Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "characterAlignment",
          "shortdesc": "The alignment of small characters to the largest character in the line. Can return: CharacterAlignment enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "tsume",
          "shortdesc": "The amount of horizontal character compression. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "leadingAki",
          "shortdesc": "The amount of space before each character. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "trailingAki",
          "shortdesc": "The amount of space after each character. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "characterRotation",
          "shortdesc": "The rotation angle &#40;in degrees) of individual characters. Note: The rotation is counterclockwise. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "jidori",
          "shortdesc": "The number of grid squares in which to arrange the text. . Can return: Short Integer or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "shataiMagnification",
          "shortdesc": "The amount &#40;as a percentage) of shatai obliquing to apply. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "shataiDegreeAngle",
          "shortdesc": "The shatai lens angle &#40;in degrees). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "shataiAdjustRotation",
          "shortdesc": "If true, applies shatai rotation. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "shataiAdjustTsume",
          "shortdesc": "If true, adjusts shatai tsume. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "tatechuyoko",
          "shortdesc": "If true, makes the character horizontal in vertical text. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "tatechuyokoXOffset",
          "shortdesc": "The horizontal offset for horizontal characters in vertical text. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "tatechuyokoYOffset",
          "shortdesc": "The vertical offset for horizontal characters in vertical text. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenFillColor",
          "shortdesc": "The swatch &#40;color, gradient, tint, or mixed ink) applied to the fill of kenten characters. Can return: Swatch, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenStrokeColor",
          "shortdesc": "The swatch &#40;color, gradient, tint, or mixed ink) applied to the stroke of kenten characters. Can return: Swatch, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenTint",
          "shortdesc": "The fill tint &#40;as a percentage) of kenten characters. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenStrokeTint",
          "shortdesc": "The stroke tint &#40;as a percentage) of kenten characters. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenWeight",
          "shortdesc": "The stroke weight &#40;in points) of kenten characters. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenOverprintFill",
          "shortdesc": "The method of overprinting the kenten fill. Can return: AdornmentOverprint enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenOverprintStroke",
          "shortdesc": "The method of overprinting the kenten stroke. Can return: AdornmentOverprint enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenKind",
          "shortdesc": "The style of kenten characters. Can return: KentenCharacter enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenPlacement",
          "shortdesc": "The distance between kenten characters and their parent characters. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenAlignment",
          "shortdesc": "The alignment of kenten characters relative to the parent characters. . Can return: KentenAlignment enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenPosition",
          "shortdesc": "The kenten position relative to the parent character. Can return: RubyKentenPosition enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenFont",
          "shortdesc": "The font to use for kenten characters. Can return: Font, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenFontStyle",
          "shortdesc": "The font style of kenten characters. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenFontSize",
          "shortdesc": "The size &#40;in points) of kenten characters. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenXScale",
          "shortdesc": "The horizontal size of kenten characters as a percent of the original size. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenYScale",
          "shortdesc": "The vertical size of kenten charachers as a percent of the original size. . Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenCustomCharacter",
          "shortdesc": "The character used for kenten. Note: Valid only when kenten kind is custom. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenCharacterSet",
          "shortdesc": "The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. . Can return: KentenCharacterSet enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyFill",
          "shortdesc": "The swatch &#40;color, gradient, tint, or mixed ink) applied to the fill of ruby characters. Can return: Swatch, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyStroke",
          "shortdesc": "The swatch &#40;color, gradient, tint, or mixed ink) applied to the stroke of ruby characters. Can return: Swatch, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyTint",
          "shortdesc": "The tint &#40;as a percentage) of the ruby fill color. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyWeight",
          "shortdesc": "The stroke weight &#40;in points) of ruby characters. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyOverprintFill",
          "shortdesc": "The method of overprinting the ruby fill. Can return: AdornmentOverprint enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyOverprintStroke",
          "shortdesc": "The method of overprinting the ruby stroke. Can return: AdornmentOverprint enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyStrokeTint",
          "shortdesc": "The stroke tint &#40;as a percentage) of ruby characters. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyFont",
          "shortdesc": "The font applied to ruby characters. Can return: Font, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyFontStyle",
          "shortdesc": "The font style of ruby characters. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyFontSize",
          "shortdesc": "The size &#40;in points) of ruby characters. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyOpenTypePro",
          "shortdesc": "If true, uses OpenType Pro fonts for ruby. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyXScale",
          "shortdesc": "The horizontal size of ruby characters, specified as a percent of the original size. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyYScale",
          "shortdesc": "The vertical size of ruby characters, specified as a percent of the original size. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyType",
          "shortdesc": "The ruby type. Can return: RubyTypes enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyAlignment",
          "shortdesc": "The ruby alignment. Can return: RubyAlignments enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyPosition",
          "shortdesc": "The position of ruby characters relative to the parent text. Can return: RubyKentenPosition enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyXOffset",
          "shortdesc": "The amount of horizontal space between ruby and parent characters. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyYOffset",
          "shortdesc": "The amount of vertical space between ruby and parent characters. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyParentSpacing",
          "shortdesc": "The ruby spacing relative to the parent text. . Can return: RubyParentSpacing enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyAutoAlign",
          "shortdesc": "If true, auto aligns ruby. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyOverhang",
          "shortdesc": "If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyAutoScaling",
          "shortdesc": "If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyParentScalingPercent",
          "shortdesc": "The amount &#40;as a percentage) to scale the parent text size to determine the ruby text size. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyParentOverhangAmount",
          "shortdesc": "The amount by which ruby characters can overhang the parent text. Can return: RubyOverhang enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyAutoTcyDigits",
          "shortdesc": "The number of digits included in auto tcy &#40;tate-chuu-yoko) in ruby. Can return: Short Integer or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyAutoTcyIncludeRoman",
          "shortdesc": "If true, includes Roman characters in auto tcy &#40;tate-chuu-yoko) in ruby. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyAutoTcyAutoScale",
          "shortdesc": "If true, automatically scales glyphs in auto tcy &#40;tate-chuu-yoko) in ruby to fit one em. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "warichu",
          "shortdesc": "If true, turns on warichu. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "warichuSize",
          "shortdesc": "The amount &#40;as a percentage) to scale parent text size to determine warichu size. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "warichuLines",
          "shortdesc": "The number of lines of warichu within a single normal line. Can return: Short Integer or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "warichuLineSpacing",
          "shortdesc": "The gap between lines of warichu characters. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "warichuAlignment",
          "shortdesc": "The warichu alignment. Can return: WarichuAlignment enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "warichuCharsAfterBreak",
          "shortdesc": "The minimum number of characters allowed after a line break. . Can return: Short Integer or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "warichuCharsBeforeBreak",
          "shortdesc": "The minimum number of characters allowed before a line break. Can return: Short Integer or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfProportionalMetrics",
          "shortdesc": "If true, kerns according to proportional CJK metrics in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfHVKana",
          "shortdesc": "If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "otfRomanItalics",
          "shortdesc": "If true, applies italics to half-width alphanumerics. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "scaleAffectsLineHeight",
          "shortdesc": "If true, the line changes size when characters are scaled. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "cjkGridTracking",
          "shortdesc": "If true, uses grid tracking to track non-Roman characters in CJK grids. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "glyphForm",
          "shortdesc": "The glyph variant to substitute for standard glyphs. Can return: AlternateGlyphForms enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "paragraphGyoudori",
          "shortdesc": "If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gridAlignment",
          "shortdesc": "The alignment to the frame grid or baseline grid. Can return: GridAlignment enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gridGyoudori",
          "shortdesc": "The manual gyoudori setting. Can return: Short Integer or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "autoTcy",
          "shortdesc": "The number of half-width characters at or below which the characters automatically run horizontally in vertical text. Can return: Short Integer or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "autoTcyIncludeRoman",
          "shortdesc": "If true, auto tcy includes Roman characters. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kinsokuSet",
          "shortdesc": "The kinsoku set that determines legitimate line breaks. Can return: KinsokuTable, KinsokuSet enumerator, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kinsokuType",
          "shortdesc": "The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined. Can return: KinsokuType enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kinsokuHangType",
          "shortdesc": "The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect. Can return: KinsokuHangTypes enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "bunriKinshi",
          "shortdesc": "If true, adds the double period &#40;..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "mojikumi",
          "shortdesc": "The mojikumi table. For information, see mojikumi table defaults. Can return: MojikumiTable, String, MojikumiTableDefaults enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rensuuji",
          "shortdesc": "If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rotateSingleByteCharacters",
          "shortdesc": "If true, rotates Roman characters in vertical text. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "leadingModel",
          "shortdesc": "The point from which leading is measured from line to line. Can return: LeadingModel enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "treatIdeographicSpaceAsSpace",
          "shortdesc": "If true, ideographic spaces will not wrap to the next line like text characters. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "allowArbitraryHyphenation",
          "shortdesc": "If true, words unassociated with a hyphenation dictionary can break to the next line on any character. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "bulletsTextAfter",
          "shortdesc": "The text after string expression for bullets. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "bulletsCharacterStyle",
          "shortdesc": "The character style to be used for the text after string. Can return: CharacterStyle, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "bulletsAlignment",
          "shortdesc": "The alignment of the bullet character. Can return: ListAlignment enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "appliedNumberingList",
          "shortdesc": "The list to be part of. Can return: NumberingList, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingLevel",
          "shortdesc": "The level of the paragraph. Can return: Long Integer or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingFormat",
          "shortdesc": "Numbering format options. Can return: NumberingStyle enumerator, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingExpression",
          "shortdesc": "The number string expression for numbering. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingCharacterStyle",
          "shortdesc": "The character style to be used for the number string. Can return: CharacterStyle, String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingContinue",
          "shortdesc": "Continue the numbering at this level. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingStartAt",
          "shortdesc": "Determines starting number in a numbered list. Can return: Long Integer or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingApplyRestartPolicy",
          "shortdesc": "If true, apply the numbering restart policy. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingAlignment",
          "shortdesc": "The alignment of the number. Can return: ListAlignment enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "bulletsAndNumberingListType",
          "shortdesc": "List type for bullets and numbering. Can return: ListType enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "properties",
          "shortdesc": "A property that allows setting of several properties at the same time.",
          "datatype": {
            "type": "Object"
          }
        }
      ],
      "method": [
        {
          "name": "toSource",
          "shortdesc": "Generates a string which, if executed, will return the FindTransliteratePreference.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "getElements",
          "shortdesc": "Resolves the object specifier, creating an array of object references.",
          "datatype": {
            "type": "FindTransliteratePreference",
            "array": true
          }
        },
        {
          "name": "toSpecifier",
          "shortdesc": "Retrieves the object specifier.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "addEventListener",
          "shortdesc": "Adds an event listener.",
          "parameters": [
            {
              "name": "eventType",
              "shortdesc": "The event type.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "handler",
              "shortdesc": "The event handler. Can accept: File or JavaScript Function.",
              "datatype": {
                "type": "Mixed"
              }
            },
            {
              "name": "captures",
              "optional": true,
              "shortdesc": "This parameter is obsolete. &#40;Optional)",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "EventListener"
          }
        },
        {
          "name": "removeEventListener",
          "shortdesc": "Removes the event listener.",
          "parameters": [
            {
              "name": "eventType",
              "shortdesc": "The registered event type.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "handler",
              "shortdesc": "The registered event handler. Can accept: File or JavaScript Function.",
              "datatype": {
                "type": "Mixed"
              }
            },
            {
              "name": "captures",
              "optional": true,
              "shortdesc": "This parameter is obsolete. &#40;Optional)",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "Boolean"
          }
        }
      ]
    }
  ]
}