{
  "name": "CellStyle",
  "dynamic": true,
  "shortdesc": "A cell style.",
  "elements": [
    {
      "type": "instance",
      "property": [
        {
          "name": "id",
          "rwaccess": "readonly",
          "shortdesc": "The unique ID of the CellStyle.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "isValid",
          "rwaccess": "readonly",
          "shortdesc": "Returns true if the object specifier resolves to valid objects.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "parent",
          "rwaccess": "readonly",
          "shortdesc": "The parent of the CellStyle &amp;&#35;40;a Document, Application or CellStyleGroup&#41;.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "index",
          "rwaccess": "readonly",
          "shortdesc": "The index of the CellStyle within its containing object.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "events",
          "rwaccess": "readonly",
          "shortdesc": "A collection of events.",
          "datatype": {
            "type": "Events"
          }
        },
        {
          "name": "eventListeners",
          "rwaccess": "readonly",
          "shortdesc": "A collection of event listeners.",
          "datatype": {
            "type": "EventListeners"
          }
        },
        {
          "name": "basedOn",
          "shortdesc": "The style that this style is based on. Can return: CellStyle or String.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "appliedParagraphStyle",
          "shortdesc": "The paragraph style applied to the text. Can return: ParagraphStyle or NothingEnum enumerator. Can also accept: String.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "gradientFillLength",
          "shortdesc": "The length &amp;&#35;40;of a linear gradient&#41; or radius (of a radial gradient) applied to the fill of the object. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "gradientFillAngle",
          "shortdesc": "The angle of a linear gradient applied to the fill of the object. &amp;&#35;40;Range: -180 to 180&#41;. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "gradientFillStart",
          "shortdesc": "The starting point &amp;&#35;40;in page coordinates&#41; of a gradient applied to the fill of the CellStyle, in the format [x, y]. Can return: Array of 2 Units or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "topInset",
          "shortdesc": "The top inset of the cell. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "leftInset",
          "shortdesc": "The left inset of the cell. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "bottomInset",
          "shortdesc": "The bottom inset of the cell. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "rightInset",
          "shortdesc": "The right inset of the cell. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "fillColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the fill of the object. Can return: Swatch or NothingEnum enumerator. Can also accept: String.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "fillTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the fill of the object. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "overprintFill",
          "shortdesc": "If true, the fill of the object will overprint. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "topLeftDiagonalLine",
          "shortdesc": "If true, draws a diagonal line starting from the top left. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "topRightDiagonalLine",
          "shortdesc": "If true, draws a diagonal line starting from the top right. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "diagonalLineInFront",
          "shortdesc": "If true, draws the diagonal line in front of cell contents. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "diagonalLineStrokeWeight",
          "shortdesc": "The diagonal line stroke weight. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "diagonalLineStrokeType",
          "shortdesc": "The stroke type of the diagonal line&amp;&#35;40;s&#41;. Can return: StrokeStyle or NothingEnum enumerator. Can also accept: String.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "diagonalLineStrokeColor",
          "shortdesc": "The diagonal line color, specified as a swatch. Can return: Swatch or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "diagonalLineStrokeTint",
          "shortdesc": "The diagonal line tint &amp;&#35;40;as a percentage&#41;. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "diagonalLineStrokeOverprint",
          "shortdesc": "If true, the diagonal line stroke will overprint. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "diagonalLineStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the diagonal line stroke. Note: Not valid when diagonal line stroke type is solid. Can return: Swatch or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "diagonalLineStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the diagonal line stroke gap color. Note: Not valid when diagonal line stroke type is solid. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "diagonalLineStrokeGapOverprint",
          "shortdesc": "If true, the stroke gap of the diagonal line will overprint. Note: Not valid when diagonal line stroke type is solid. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "clipContentToCell",
          "shortdesc": "If true, clips the cell&apos;s content to width and height of the cell. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "firstBaselineOffset",
          "shortdesc": "The distance between the baseline of the text and the top inset of the cell. Can return: FirstBaseline enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "verticalJustification",
          "shortdesc": "The vertical alignment of cell. Can return: VerticalJustification enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "paragraphSpacingLimit",
          "shortdesc": "The maximum space that can be added between paragraphs in a cell. Note: Valid only when vertical justification is justified. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "minimumFirstBaselineOffset",
          "shortdesc": "The space between the baseline of the text and the top inset of the frame or cell. Can return: Unit &amp;&#35;40;0 - 8640 points&#41; or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "rotationAngle",
          "shortdesc": "The rotation angle &amp;&#35;40;in degrees&#41; of the cell, specified as one of the following values: 0, 90, 180, or 270. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "leftEdgeStrokeWeight",
          "shortdesc": "The stroke weight of the left edge border stroke. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "leftEdgeStrokeType",
          "shortdesc": "The stroke type of the left edge. Can return: StrokeStyle or NothingEnum enumerator. Can also accept: String.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "leftEdgeStrokeColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the left edge border stroke. Can return: Swatch or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "leftEdgeStrokeTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the left edge border stroke. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "leftEdgeStrokeOverprint",
          "shortdesc": "If true, the left edge border stroke will overprint. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "leftEdgeStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the left edge border stroke. Note: Not valid when left edge stroke type is solid. Can return: Swatch or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "leftEdgeStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the left edge border stroke gap color. (Range: 0 to 100) Note: Not valid when left edge stroke type is solid. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "leftEdgeStrokeGapOverprint",
          "shortdesc": "If true, the gap color of the left edge border stroke will overprint. Note: Not valid when left edge stroke type is solid. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "topEdgeStrokeWeight",
          "shortdesc": "The stroke weight of the top edge border stroke. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "topEdgeStrokeType",
          "shortdesc": "The stroke type of the top edge. Can return: StrokeStyle or NothingEnum enumerator. Can also accept: String.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "topEdgeStrokeColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the top edge border stroke. Can return: Swatch or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "topEdgeStrokeTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the top edge border stroke. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "topEdgeStrokeOverprint",
          "shortdesc": "If true, the top edge border stroke will overprint. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "topEdgeStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the top edge border stroke. Note: Not valid when top edge stroke type is solid. Can return: Swatch or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "topEdgeStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the top edge border stroke gap color. (Range: 0 to 100) Note: Not valid when top edge stroke type is solid. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "topEdgeStrokeGapOverprint",
          "shortdesc": "If true, the gap color of the top edge border stroke will overprint. Note: Not valid when top edge stroke type is solid. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "rightEdgeStrokeWeight",
          "shortdesc": "The stroke weight of the right edge border stroke. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "rightEdgeStrokeType",
          "shortdesc": "The stroke type of the right edge. Can return: StrokeStyle or NothingEnum enumerator. Can also accept: String.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "rightEdgeStrokeColor",
          "shortdesc": "The color, specified as a swatch, of the right edge border stroke. Can return: Swatch or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "rightEdgeStrokeTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the right edge border stroke. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "rightEdgeStrokeOverprint",
          "shortdesc": "If true, the right edge border stroke will overprint. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "rightEdgeStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the right edge border stroke. Note: Not valid when right edge stroke type is solid. Can return: Swatch or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "rightEdgeStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the right edge border stroke gap color. (Range: 0 to 100) Note: Not valid when right edge stroke type is solid. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "rightEdgeStrokeGapOverprint",
          "shortdesc": "If true, the gap color of the right edge border stroke will overprint. Note: Not valid when right edge stroke type is solid. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "bottomEdgeStrokeWeight",
          "shortdesc": "The stroke weight of the bottom edge border stroke. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "bottomEdgeStrokeType",
          "shortdesc": "The stroke type of the bottom edge. Can return: StrokeStyle or NothingEnum enumerator. Can also accept: String.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "bottomEdgeStrokeColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the bottom edge border stroke. Can return: Swatch or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "bottomEdgeStrokeTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the bottom edge border stroke. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "bottomEdgeStrokeOverprint",
          "shortdesc": "If true, the bottom edge border stroke will overprint. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "bottomEdgeStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the bottom edge border stroke. Note: Not valid when bottom edge stroke type is solid. Can return: Swatch or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "bottomEdgeStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the bottom edge border stroke gap color. (Range: 0 to 100) Note: Not valid when bottom edge stroke type is solid. Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "bottomEdgeStrokeGapOverprint",
          "shortdesc": "If true, the gap color of the bottom edge border stroke will overprint. Note: Not valid when bottom edge stroke type is solid. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "name",
          "shortdesc": "The name of the style.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "label",
          "shortdesc": "A property that can be set to any string.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "properties",
          "shortdesc": "A property that allows setting of several properties at the same time.",
          "datatype": {
            "type": "Object"
          }
        }
      ],
      "method": [
        {
          "name": "remove",
          "shortdesc": "Deletes the style.",
          "parameters": {
            "parameter": [
              {
                "name": "replacingWith",
                "shortdesc": "The style to apply in place of the deleted style. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "CellStyle"
                }
              }
            ]
          }
        },
        {
          "name": "duplicate",
          "shortdesc": "Duplicates the CellStyle.",
          "datatype": {
            "type": "CellStyle"
          }
        },
        {
          "name": "move",
          "shortdesc": "Moves the style to the specified location.",
          "parameters": {
            "parameter": [
              {
                "name": "to",
                "shortdesc": "The location relative to the reference object or within the containing object.",
                "datatype": {
                  "type": "LocationOptions"
                }
              },
              {
                "name": "reference",
                "shortdesc": "The reference object. Note: Required when the to parameter specifies before or after. Can accept: ParagraphStyle, ParagraphStyleGroup, CharacterStyle, CharacterStyleGroup, CellStyle, CellStyleGroup, TableStyle, TableStyleGroup, Document or Application. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "mixed"
                }
              }
            ]
          },
          "datatype": {
            "type": "CellStyle"
          }
        },
        {
          "name": "insertLabel",
          "shortdesc": "Sets the label to the value associated with the specified key.",
          "parameters": {
            "parameter": [
              {
                "name": "key",
                "shortdesc": "The key.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "value",
                "shortdesc": "The value.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          }
        },
        {
          "name": "extractLabel",
          "shortdesc": "Gets the label value associated with the specified key.",
          "parameters": {
            "parameter": [
              {
                "name": "key",
                "shortdesc": "The key.",
                "datatype": {
                  "type": "string"
                }
              }
            ]
          },
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "toSource",
          "shortdesc": "Generates a string which, if executed, will return the CellStyle.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "getElements",
          "shortdesc": "Resolves the object specifier, creating an array of object references.",
          "datatype": {
            "type": "CellStyle",
            "array": {}
          }
        },
        {
          "name": "toSpecifier",
          "shortdesc": "Retrieves the object specifier.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "addEventListener",
          "shortdesc": "Adds an event listener.",
          "parameters": {
            "parameter": [
              {
                "name": "eventType",
                "shortdesc": "The event type.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "handler",
                "shortdesc": "The event handler. Can accept: File or JavaScript Function.",
                "datatype": {
                  "type": "mixed"
                }
              },
              {
                "name": "captures",
                "optional": true,
                "shortdesc": "This parameter is obsolete. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          },
          "datatype": {
            "type": "EventListener"
          }
        },
        {
          "name": "removeEventListener",
          "shortdesc": "Removes the event listener.",
          "parameters": {
            "parameter": [
              {
                "name": "eventType",
                "shortdesc": "The registered event type.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "handler",
                "shortdesc": "The registered event handler. Can accept: File or JavaScript Function.",
                "datatype": {
                  "type": "mixed"
                }
              },
              {
                "name": "captures",
                "optional": true,
                "shortdesc": "This parameter is obsolete. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          },
          "datatype": {
            "type": "bool"
          }
        }
      ]
    }
  ]
}