{
  "name": "Column",
  "dynamic": true,
  "shortdesc": "A table column.",
  "elements": [
    {
      "type": "instance",
      "property": [
        {
          "name": "name",
          "rwaccess": "readonly",
          "shortdesc": "The name of the Column.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "index",
          "rwaccess": "readonly",
          "shortdesc": "The index of the Column within its containing object.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "rowSpan",
          "rwaccess": "readonly",
          "shortdesc": "The number of rows that the object spans.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "columnSpan",
          "rwaccess": "readonly",
          "shortdesc": "The number of columns that the object spans.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "overflows",
          "rwaccess": "readonly",
          "shortdesc": "If true, the story has overset text.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "parentRow",
          "rwaccess": "readonly",
          "shortdesc": "The parent row of the cell.",
          "datatype": {
            "type": "Row"
          }
        },
        {
          "name": "parentColumn",
          "rwaccess": "readonly",
          "shortdesc": "The parent column of the cell.",
          "datatype": {
            "type": "Column"
          }
        },
        {
          "name": "isValid",
          "rwaccess": "readonly",
          "shortdesc": "Returns true if the object specifier resolves to valid objects.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "parent",
          "rwaccess": "readonly",
          "shortdesc": "The parent of the Column &amp;&#35;40;a Table&#41;.",
          "datatype": {
            "type": "Table"
          }
        },
        {
          "name": "cells",
          "rwaccess": "readonly",
          "shortdesc": "A collection of table cells.",
          "datatype": {
            "type": "Cells"
          }
        },
        {
          "name": "rows",
          "rwaccess": "readonly",
          "shortdesc": "A collection of table rows.",
          "datatype": {
            "type": "Rows"
          }
        },
        {
          "name": "columns",
          "rwaccess": "readonly",
          "shortdesc": "A collection of table columns.",
          "datatype": {
            "type": "Columns"
          }
        },
        {
          "name": "events",
          "rwaccess": "readonly",
          "shortdesc": "A collection of events.",
          "datatype": {
            "type": "Events"
          }
        },
        {
          "name": "eventListeners",
          "rwaccess": "readonly",
          "shortdesc": "A collection of event listeners.",
          "datatype": {
            "type": "EventListeners"
          }
        },
        {
          "name": "height",
          "shortdesc": "The height of the Column. For a table or column, specifies the sum of the row heights.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "width",
          "shortdesc": "The width of the Column. For a table or row, specifies the sum of the column widths.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "contents",
          "shortdesc": "The text contents. For rows or columns, when specified as a string, the sting populates each cell in the row or column; when specified as an array, the first value in the array populates the left-most cell in the row or the top-most cell in the column; the next value populates the next cell to the right &amp;&#35;40;for rows&#41; or the next lowest cell (for columns), and so on. Can return: String, SpecialCharacters enumerator or Array of Strings or SpecialCharacters enumerators. Can also accept: NothingEnum enumerator or Array of Strings, SpecialCharacters enumerators or NothingEnum enumerators.",
          "datatype": {
            "type": "mixed"
          }
        },
        {
          "name": "gradientFillLength",
          "shortdesc": "The length &amp;&#35;40;of a linear gradient&#41; or radius (of a radial gradient) applied to the fill of the object.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "gradientFillAngle",
          "shortdesc": "The angle of a linear gradient applied to the fill of the object. &amp;&#35;40;Range: -180 to 180&#41;",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "gradientFillStart",
          "shortdesc": "The starting point &amp;&#35;40;in page coordinates&#41; of a gradient applied to the fill of the Column, in the format [x, y].",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any",
            "array": true
          }
        },
        {
          "name": "topInset",
          "shortdesc": "The top inset of the cell.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "leftInset",
          "shortdesc": "The left inset of the cell.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "bottomInset",
          "shortdesc": "The bottom inset of the cell.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "rightInset",
          "shortdesc": "The right inset of the cell.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "fillColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the fill of the object. Can also accept: String.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "fillTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the fill of the object.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "overprintFill",
          "shortdesc": "If true, the fill of the object will overprint.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "topLeftDiagonalLine",
          "shortdesc": "If true, draws a diagonal line starting from the top left.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "topRightDiagonalLine",
          "shortdesc": "If true, draws a diagonal line starting from the top right.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "diagonalLineInFront",
          "shortdesc": "If true, draws the diagonal line in front of cell contents.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "diagonalLineStrokeWeight",
          "shortdesc": "The diagonal line stroke weight.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "diagonalLineStrokeType",
          "shortdesc": "The stroke type of the diagonal line&amp;&#35;40;s&#41;. Can also accept: String.",
          "datatype": {
            "type": "StrokeStyle"
          }
        },
        {
          "name": "diagonalLineStrokeColor",
          "shortdesc": "The diagonal line color, specified as a swatch.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "diagonalLineStrokeTint",
          "shortdesc": "The diagonal line tint &amp;&#35;40;as a percentage&#41;. (Range: 0 to 100)",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "diagonalLineStrokeOverprint",
          "shortdesc": "If true, the diagonal line stroke will overprint.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "diagonalLineStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the diagonal line stroke. Note: Not valid when diagonal line stroke type is solid.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "diagonalLineStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the diagonal line stroke gap color. Note: Not valid when diagonal line stroke type is solid.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "diagonalLineStrokeGapOverprint",
          "shortdesc": "If true, the stroke gap of the diagonal line will overprint. Note: Not valid when diagonal line stroke type is solid.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "clipContentToCell",
          "shortdesc": "If true, clips the cell&apos;s content to width and height of the cell.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "firstBaselineOffset",
          "shortdesc": "The distance between the baseline of the text and the top inset of the cell.",
          "datatype": {
            "type": "FirstBaseline"
          }
        },
        {
          "name": "verticalJustification",
          "shortdesc": "The vertical alignment of cell.",
          "datatype": {
            "type": "VerticalJustification"
          }
        },
        {
          "name": "paragraphSpacingLimit",
          "shortdesc": "The maximum space that can be added between paragraphs in a cell. Note: Valid only when vertical justification is justified.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "minimumFirstBaselineOffset",
          "shortdesc": "The space between the baseline of the text and the top inset of the frame or cell.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any",
            "min": 0,
            "max": 8640
          }
        },
        {
          "name": "rotationAngle",
          "shortdesc": "The rotation angle &amp;&#35;40;in degrees&#41; of the cell, specified as one of the following values: 0, 90, 180, or 270.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "leftEdgeStrokeWeight",
          "shortdesc": "The stroke weight of the left edge border stroke.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "leftEdgeStrokeType",
          "shortdesc": "The stroke type of the left edge. Can also accept: String.",
          "datatype": {
            "type": "StrokeStyle"
          }
        },
        {
          "name": "leftEdgeStrokeColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the left edge border stroke.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "leftEdgeStrokeTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the left edge border stroke. (Range: 0 to 100)",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "leftEdgeStrokeOverprint",
          "shortdesc": "If true, the left edge border stroke will overprint.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "leftEdgeStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the left edge border stroke. Note: Not valid when left edge stroke type is solid.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "leftEdgeStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the left edge border stroke gap color. (Range: 0 to 100) Note: Not valid when left edge stroke type is solid.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "leftEdgeStrokeGapOverprint",
          "shortdesc": "If true, the gap color of the left edge border stroke will overprint. Note: Not valid when left edge stroke type is solid.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "topEdgeStrokeWeight",
          "shortdesc": "The stroke weight of the top edge border stroke.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "topEdgeStrokeType",
          "shortdesc": "The stroke type of the top edge. Can also accept: String.",
          "datatype": {
            "type": "StrokeStyle"
          }
        },
        {
          "name": "topEdgeStrokeColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the top edge border stroke.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "topEdgeStrokeTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the top edge border stroke. (Range: 0 to 100)",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "topEdgeStrokeOverprint",
          "shortdesc": "If true, the top edge border stroke will overprint.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "topEdgeStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the top edge border stroke. Note: Not valid when top edge stroke type is solid.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "topEdgeStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the top edge border stroke gap color. (Range: 0 to 100) Note: Not valid when top edge stroke type is solid.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "topEdgeStrokeGapOverprint",
          "shortdesc": "If true, the gap color of the top edge border stroke will overprint. Note: Not valid when top edge stroke type is solid.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "rightEdgeStrokeWeight",
          "shortdesc": "The stroke weight of the right edge border stroke.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "rightEdgeStrokeType",
          "shortdesc": "The stroke type of the right edge. Can also accept: String.",
          "datatype": {
            "type": "StrokeStyle"
          }
        },
        {
          "name": "rightEdgeStrokeColor",
          "shortdesc": "The color, specified as a swatch, of the right edge border stroke.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "rightEdgeStrokeTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the right edge border stroke. (Range: 0 to 100)",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "rightEdgeStrokeOverprint",
          "shortdesc": "If true, the right edge border stroke will overprint.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "rightEdgeStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the right edge border stroke. Note: Not valid when right edge stroke type is solid.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "rightEdgeStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the right edge border stroke gap color. (Range: 0 to 100) Note: Not valid when right edge stroke type is solid.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "rightEdgeStrokeGapOverprint",
          "shortdesc": "If true, the gap color of the right edge border stroke will overprint. Note: Not valid when right edge stroke type is solid.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "bottomEdgeStrokeWeight",
          "shortdesc": "The stroke weight of the bottom edge border stroke.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "bottomEdgeStrokeType",
          "shortdesc": "The stroke type of the bottom edge. Can also accept: String.",
          "datatype": {
            "type": "StrokeStyle"
          }
        },
        {
          "name": "bottomEdgeStrokeColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the bottom edge border stroke.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "bottomEdgeStrokeTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the bottom edge border stroke.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "bottomEdgeStrokeOverprint",
          "shortdesc": "If true, the bottom edge border stroke will overprint.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "bottomEdgeStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the bottom edge border stroke. Note: Not valid when bottom edge stroke type is solid.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "bottomEdgeStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the bottom edge border stroke gap color. (Range: 0 to 100) Note: Not valid when bottom edge stroke type is solid.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "bottomEdgeStrokeGapOverprint",
          "shortdesc": "If true, the gap color of the bottom edge border stroke will overprint. Note: Not valid when bottom edge stroke type is solid.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "innerRowStrokeWeight",
          "shortdesc": "The stroke weight of the inner row border strokes.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "innerRowStrokeType",
          "shortdesc": "The stroke type of the inner row. Can also accept: String.",
          "datatype": {
            "type": "StrokeStyle"
          }
        },
        {
          "name": "innerRowStrokeColor",
          "shortdesc": "The color, specified as a swatch, of the inner row border stroke.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "innerRowStrokeTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the inner row border stroke. (Range: 0 to 100)",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "innerRowStrokeOverprint",
          "shortdesc": "If true, the inner row border stroke will overprint.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "innerRowStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the inner row border stroke. Note: Not valid when inner row stroke type is solid.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "innerRowStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the inner row border stroke. (Range: 0 to 100) Note: Not valid when inner row stroke type is solid.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "innerRowStrokeGapOverprint",
          "shortdesc": "If true, the gap color of the inner row border stroke will overprint. Note: Not valid when inner row stroke type is solid.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "innerColumnStrokeWeight",
          "shortdesc": "The stroke weight of the inner column border stroke.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "innerColumnStrokeType",
          "shortdesc": "The stroke type of the inner column. Can also accept: String.",
          "datatype": {
            "type": "StrokeStyle"
          }
        },
        {
          "name": "innerColumnStrokeColor",
          "shortdesc": "The color, specified as a swatch, of the inner column border stroke.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "innerColumnStrokeTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the inner column border stroke. (Range: 0 to 100)",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "innerColumnStrokeOverprint",
          "shortdesc": "If true, the inner column border stroke will overprint.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "innerColumnStrokeGapColor",
          "shortdesc": "The swatch &amp;&#35;40;color, gradient, tint, or mixed ink&#41; applied to the gap of the inner column border stroke. Note: Not valid when inner column stroke type is solid.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "innerColumnStrokeGapTint",
          "shortdesc": "The tint &amp;&#35;40;as a percentage&#41; of the inner column border stroke gap color. (Range: 0 to 100) Note: Not valid when inner column stroke type is solid.",
          "datatype": {
            "type": "number"
          }
        },
        {
          "name": "innerColumnStrokeGapOverprint",
          "shortdesc": "If true, the gap color of the inner column border stroke will overprint. Note: Not valid when inner column stroke type is solid.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "minimumHeight",
          "shortdesc": "The minimum height of the cells in the Column. Note: When auto grow is true, cells can automatically grow larger than this amount when content is added. Also, the minimum height can affect redistribution.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "maximumHeight",
          "shortdesc": "The maximum height to which cells in the Column may grow. Note: The maximum height cannot be exceeded even when auto grow is set to true. Also, the maximum height can affect redistribution.",
          "datatype": {
            "type": "Measurement Unit &amp;&#35;40;Number or String&#41;=any"
          }
        },
        {
          "name": "keepWithNextRow",
          "shortdesc": "If true, keeps the row with the next row when the table is split across text frames or pages.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "startRow",
          "shortdesc": "Indicates where to start the row.",
          "datatype": {
            "type": "StartParagraph"
          }
        },
        {
          "name": "autoGrow",
          "shortdesc": "If true, the height of the cell or the cells in the Column can increase or decrease automatically to fit cell content. Note: Allows cells to grow or shrink to the maximum or minimum height, if specified.",
          "datatype": {
            "type": "bool"
          }
        },
        {
          "name": "rowType",
          "shortdesc": "The row type.",
          "datatype": {
            "type": "RowTypes"
          }
        },
        {
          "name": "writingDirection",
          "shortdesc": "The direction of the text in the cell.",
          "datatype": {
            "type": "HorizontalOrVertical"
          }
        },
        {
          "name": "properties",
          "shortdesc": "A property that allows setting of several properties at the same time.",
          "datatype": {
            "type": "Object"
          }
        }
      ],
      "method": [
        {
          "name": "recompose",
          "shortdesc": "Recomposes the text in the Column."
        },
        {
          "name": "findText",
          "shortdesc": "Finds text that matches the find what value.",
          "parameters": {
            "parameter": [
              {
                "name": "reverseOrder",
                "shortdesc": "If true, returns the results in reverse order. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool"
                }
              }
            ]
          },
          "datatype": {
            "type": "Text",
            "array": {}
          }
        },
        {
          "name": "changeText",
          "shortdesc": "Finds text that matches the find what value and replaces the text with the change to value.",
          "parameters": {
            "parameter": [
              {
                "name": "reverseOrder",
                "shortdesc": "If true, returns the results in reverse order. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool"
                }
              }
            ]
          },
          "datatype": {
            "type": "Text",
            "array": {}
          }
        },
        {
          "name": "findGrep",
          "shortdesc": "Finds text that matches the find what value.",
          "parameters": {
            "parameter": [
              {
                "name": "reverseOrder",
                "shortdesc": "If true, returns the results in reverse order. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool"
                }
              }
            ]
          },
          "datatype": {
            "type": "Text",
            "array": {}
          }
        },
        {
          "name": "changeGrep",
          "shortdesc": "Finds text that matches the find what value and replaces the text with the change to value.",
          "parameters": {
            "parameter": [
              {
                "name": "reverseOrder",
                "shortdesc": "If true, returns the results in reverse order. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool"
                }
              }
            ]
          },
          "datatype": {
            "type": "Text",
            "array": {}
          }
        },
        {
          "name": "findGlyph",
          "shortdesc": "Finds glyphs that match the find what value.",
          "parameters": {
            "parameter": [
              {
                "name": "reverseOrder",
                "shortdesc": "If true, returns the results in reverse order. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool"
                }
              }
            ]
          },
          "datatype": {
            "type": "Text",
            "array": {}
          }
        },
        {
          "name": "changeGlyph",
          "shortdesc": "Finds glyphs that match the find what value and replaces the glyphs with the change to value.",
          "parameters": {
            "parameter": [
              {
                "name": "reverseOrder",
                "shortdesc": "If true, returns the results in reverse order. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool"
                }
              }
            ]
          },
          "datatype": {
            "type": "Text",
            "array": {}
          }
        },
        {
          "name": "findTransliterate",
          "shortdesc": "Finds text that matches the find character type value.",
          "parameters": {
            "parameter": [
              {
                "name": "reverseOrder",
                "shortdesc": "If true, returns the results in reverse order. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool"
                }
              }
            ]
          },
          "datatype": {
            "type": "Text",
            "array": {}
          }
        },
        {
          "name": "changeTransliterate",
          "shortdesc": "Finds text that matches the find character type value and replaces the text with the change character type value.",
          "parameters": {
            "parameter": [
              {
                "name": "reverseOrder",
                "shortdesc": "If true, returns the results in reverse order. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool"
                }
              }
            ]
          },
          "datatype": {
            "type": "Text",
            "array": {}
          }
        },
        {
          "name": "remove",
          "shortdesc": "Deletes the Column."
        },
        {
          "name": "merge",
          "shortdesc": "Merges the cells.",
          "parameters": {
            "parameter": [
              {
                "name": "with",
                "shortdesc": "The cell&amp;&#35;40;s&#41; to merge with. Can accept: Cell, Row or Column. (Optional)",
                "datatype": {
                  "type": "mixed"
                }
              }
            ]
          },
          "datatype": {
            "type": "Cell"
          }
        },
        {
          "name": "unmerge",
          "shortdesc": "Unmerges all merged cells in the Column.",
          "datatype": {
            "type": "Cell",
            "array": {}
          }
        },
        {
          "name": "split",
          "shortdesc": "Splits the cell along the specified axis.",
          "parameters": {
            "parameter": [
              {
                "name": "using",
                "shortdesc": "The direction in which to split the cell.",
                "datatype": {
                  "type": "HorizontalOrVertical"
                }
              }
            ]
          }
        },
        {
          "name": "redistribute",
          "shortdesc": "Redistributes the specified range of Columns so that the Columns have a uniform size. Note: The maximum or minimum height or width specified for some of the cells in the range may prevent them from being exactly even.",
          "parameters": {
            "parameter": [
              {
                "name": "using",
                "shortdesc": "The direction in which to redistribute.",
                "datatype": {
                  "type": "HorizontalOrVertical"
                }
              },
              {
                "name": "thru",
                "shortdesc": "The last Column in the range. Can accept: Cell, Column or Row. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "mixed"
                }
              }
            ]
          }
        },
        {
          "name": "select",
          "shortdesc": "Selects the object.",
          "parameters": {
            "parameter": [
              {
                "name": "existingSelection",
                "optional": true,
                "shortdesc": "The selection status of the Column in relation to previously selected objects. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "SelectionOptions",
                  "value": "SelectionOptions.REPLACE_WITH"
                }
              }
            ]
          }
        },
        {
          "name": "createOutlines",
          "shortdesc": "Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.",
          "parameters": {
            "parameter": [
              {
                "name": "deleteOriginal",
                "optional": true,
                "shortdesc": "If true, deletes the original text. If false, creates the outlines as separate object&amp;&#35;40;s&#41; on top of the text.  (Optional)",
                "datatype": {
                  "type": "bool",
                  "value": true
                }
              }
            ]
          },
          "datatype": {
            "type": "PageItem",
            "array": {}
          }
        },
        {
          "name": "toSource",
          "shortdesc": "Generates a string which, if executed, will return the Column.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "getElements",
          "shortdesc": "Resolves the object specifier, creating an array of object references.",
          "datatype": {
            "type": "Column",
            "array": {}
          }
        },
        {
          "name": "toSpecifier",
          "shortdesc": "Retrieves the object specifier.",
          "datatype": {
            "type": "string"
          }
        },
        {
          "name": "addEventListener",
          "shortdesc": "Adds an event listener.",
          "parameters": {
            "parameter": [
              {
                "name": "eventType",
                "shortdesc": "The event type.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "handler",
                "shortdesc": "The event handler. Can accept: File or JavaScript Function.",
                "datatype": {
                  "type": "mixed"
                }
              },
              {
                "name": "captures",
                "optional": true,
                "shortdesc": "This parameter is obsolete. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          },
          "datatype": {
            "type": "EventListener"
          }
        },
        {
          "name": "removeEventListener",
          "shortdesc": "Removes the event listener.",
          "parameters": {
            "parameter": [
              {
                "name": "eventType",
                "shortdesc": "The registered event type.",
                "datatype": {
                  "type": "string"
                }
              },
              {
                "name": "handler",
                "shortdesc": "The registered event handler. Can accept: File or JavaScript Function.",
                "datatype": {
                  "type": "mixed"
                }
              },
              {
                "name": "captures",
                "optional": true,
                "shortdesc": "This parameter is obsolete. &amp;&#35;40;Optional&#41;",
                "datatype": {
                  "type": "bool",
                  "value": false
                }
              }
            ]
          },
          "datatype": {
            "type": "bool"
          }
        }
      ]
    }
  ]
}