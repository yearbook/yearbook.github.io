{
    "name": "Progressbar",
    "dynamic": true,
    "elements": {
        "class": {
            "properties": [],
            "methods": []
        },
        "constructors": {
            "methods": []
        },
        "instance": {
            "properties": [
                {
                    "name": "value",
                    "readonly": false,
                    "type": "Number",
                    "array": false,
                    "description": "The current position of the indicator. ",
                    "longdesc": "\n            If set to a value outside the range specified by 0 to\u00a0maxvalue, it is automatically reset to the closest boundary.\n          "
                },
                {
                    "name": "minvalue",
                    "readonly": false,
                    "type": "Number",
                    "array": false,
                    "description": "The minimum value in the range; always 0. If set to a different value, it is ignored. "
                },
                {
                    "name": "maxvalue",
                    "readonly": false,
                    "type": "Number",
                    "array": false,
                    "description": "The maximum value in the range. Default is 100. "
                },
                {
                    "name": "graphics",
                    "readonly": true,
                    "type": "ScriptUIGraphics",
                    "array": false,
                    "description": "\n            The graphics object that can be used to customize the element's appearance, in response to the\u00a0onDraw()\u00a0event.\n          "
                },
                {
                    "name": "visible",
                    "readonly": false,
                    "type": "Boolean",
                    "array": false,
                    "description": "True if this element is shown, false if it is hidden.",
                    "longdesc": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown."
                },
                {
                    "name": "bounds",
                    "readonly": false,
                    "type": "Bounds",
                    "array": false,
                    "description": "The boundaries of the element, in parent-relative coordinates. ",
                    "longdesc": "Setting an element's size or location changes its bounds property, and vice-versa."
                },
                {
                    "name": "location",
                    "readonly": false,
                    "type": "Point",
                    "array": false,
                    "description": "The upper left corner of this element relative to its parent.",
                    "longdesc": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa. "
                },
                {
                    "name": "maximumSize",
                    "readonly": false,
                    "type": "Dimension",
                    "array": false,
                    "description": " The maximum height and width to which the element can be resized."
                },
                {
                    "name": "minimumSize",
                    "readonly": false,
                    "type": "Dimension",
                    "array": false,
                    "description": " The minimum height and width to which the element can be resized."
                },
                {
                    "name": "preferredSize",
                    "readonly": false,
                    "type": "Dimension",
                    "array": false,
                    "description": "The preferred size, used by layout managers to determine the best size for each element.",
                    "longdesc": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default. "
                },
                {
                    "name": "size",
                    "readonly": false,
                    "type": "Dimension",
                    "array": false,
                    "description": "The current dimensions of this element.",
                    "longdesc": "\n            Initially undefined, and unless explicitly set by a script, it is defined by a\u00a0LayoutManager\u00a0. A script can explicitly set size before the layout manager is invoked to establish an element size other than the\u00a0preferredSize\u00a0or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.\n          "
                },
                {
                    "name": "windowBounds",
                    "readonly": true,
                    "type": "Bounds",
                    "array": false,
                    "description": "The bounds of this element relative to the top-level parent window."
                },
                {
                    "name": "alignment",
                    "readonly": false,
                    "type": "String",
                    "array": false,
                    "description": "\n            The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.\n          ",
                    "longdesc": "\n            This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive.\n            \n              For orientation=row:top, bottom, fill\n            \n            \n              For orientation=column: left, right, fill\n            \n            \n              For orientation=stack:top, bottom, left, right, fill\n            \n          "
                },
                {
                    "name": "children",
                    "readonly": true,
                    "type": "Object",
                    "array": true,
                    "description": "An array of child elements."
                },
                {
                    "name": "properties",
                    "readonly": false,
                    "type": "Object",
                    "array": false,
                    "description": "An object that contains one or more creation properties of the container (properties used only when the element is created). ",
                    "longdesc": "\n            A ProgressBar object has no creation properties. The third argument of the\u00a0add()\u00a0method that creates it is the initial value (default 0), and the fourth argument is the maximum value of the range (default 100).\n          "
                },
                {
                    "name": "enabled",
                    "readonly": false,
                    "type": "Boolean",
                    "array": false,
                    "description": "True if this element is enabled.",
                    "longdesc": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance. "
                },
                {
                    "name": "helpTip",
                    "readonly": false,
                    "type": "String",
                    "array": false,
                    "description": "The help text that is displayed when the mouse hovers over the element."
                },
                {
                    "name": "indent",
                    "readonly": false,
                    "type": "Number",
                    "array": false,
                    "description": "The number of pixels to indent the element during automatic layout.",
                    "longdesc": "Applies for column orientation and left alignment, or row orientation and top alignment."
                },
                {
                    "name": "parent",
                    "readonly": true,
                    "type": "Object",
                    "array": false,
                    "description": "The parent element."
                },
                {
                    "name": "window",
                    "readonly": true,
                    "type": "Window",
                    "array": false,
                    "description": "The window that this element belongs to."
                },
                {
                    "name": "type",
                    "readonly": true,
                    "type": "String",
                    "array": false,
                    "description": "The element type, \"progessbar\"."
                }
            ],
            "methods": [
                {
                    "name": "show",
                    "parameters": [],
                    "description": "Shows this element.",
                    "longdesc": " When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
                },
                {
                    "name": "hide",
                    "parameters": [],
                    "description": "Hides this element."
                },
                {
                    "name": "addEventListener",
                    "parameters": [
                        {
                            "name": "eventName",
                            "type": "String",
                            "array": false,
                            "optional": false,
                            "description": "The name of the event.",
                            "longdesc": "\n                Event names are listed in the JavaScript Tools Guide.\n              "
                        },
                        {
                            "name": "handler",
                            "type": "Function",
                            "array": false,
                            "optional": false,
                            "description": "The function that handles the event.",
                            "longdesc": "\n                This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the\u00a0UIEvent\u00a0object.\n              "
                        },
                        {
                            "name": "capturePhase",
                            "type": "Boolean",
                            "array": false,
                            "optional": false,
                            "description": "When true, the handler is called only in the capturing phase of the event propagation. ",
                            "longdesc": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "value": "false"
                        }
                    ],
                    "description": "Registers an event handler for a particular type of event occuring in this element.",
                    "type": "Boolean",
                    "array": false
                },
                {
                    "name": "removeEventListener",
                    "parameters": [
                        {
                            "name": "eventName",
                            "type": "String",
                            "array": false,
                            "optional": false,
                            "description": "The name of the event."
                        },
                        {
                            "name": "handler",
                            "type": "Function",
                            "array": false,
                            "optional": false,
                            "description": "The function that handles the event."
                        },
                        {
                            "name": "capturePhase",
                            "type": "Boolean",
                            "array": false,
                            "optional": false,
                            "description": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "value": "false"
                        }
                    ],
                    "description": "Unregisters an event handler for a particular type of event occuring in this element.",
                    "longdesc": " All arguments must be identical to those that were used to register the event handler.",
                    "type": "Boolean",
                    "array": false
                },
                {
                    "name": "dispatchEvent",
                    "parameters": [],
                    "description": "Simulates the occurrence of an event in this target. ",
                    "longdesc": "\n            A script can create a\u00a0UIEvent\u00a0object for a specific event and pass it to this method to start the event propagation for the event.\n          ",
                    "type": "Event",
                    "array": false
                }
            ]
        }
    },
    "description": "A horizontal bar with an indicator that shows the progress of an operation.",
    "longdesc": "\n        All progressbar controls have a horizontal orientation. The\u00a0value\u00a0property contains the current position of the progress indicator; the default is 0. There is a\u00a0minvalue\u00a0property, but it is always 0; attempts to set it to a different value are silently ignored.\n      "
}