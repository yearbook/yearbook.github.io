{
    "name": "DropDownList",
    "dynamic": true,
    "elements": {
        "class": {
            "properties": [],
            "methods": []
        },
        "constructors": {
            "methods": []
        },
        "instance": {
            "properties": [
                {
                    "name": "items",
                    "readonly": true,
                    "type": "ListItem",
                    "array": true,
                    "description": "The array of choice items displayed in the drop-down or pop-up list.",
                    "longdesc": "\n            Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control\u2019s\u00a0add()\u00a0method. Items in a drop-down list can be of type separator, in which case they cannot be selected, and are shown as a horizontal line. Each item has a\u00a0selected\u00a0property that is true when it is in the selected state.\n          "
                },
                {
                    "name": "itemSize",
                    "readonly": false,
                    "type": "Dimension",
                    "array": false,
                    "description": "The width and height in pixels of each item in the list.",
                    "longdesc": "\n            Used by auto-layout to determine the\u00a0preferredSize\u00a0of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list\n          "
                },
                {
                    "name": "selection",
                    "readonly": false,
                    "type": "ListItem",
                    "array": false,
                    "description": "The currently selected  list item. ",
                    "longdesc": "Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference."
                },
                {
                    "name": "active",
                    "readonly": false,
                    "type": "Boolean",
                    "array": false,
                    "description": "True if this element is active.",
                    "longdesc": "\n            An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a\u00a0Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.\n          "
                },
                {
                    "name": "shortcutKey",
                    "readonly": false,
                    "type": "String",
                    "array": false,
                    "description": "\n            The key sequence that invokes the\u00a0onShortcutKey()\u00a0callback for this element (in Windows only).\n          "
                },
                {
                    "name": "graphics",
                    "readonly": true,
                    "type": "ScriptUIGraphics",
                    "array": false,
                    "description": "\n            The graphics object that can be used to customize the element's appearance, in response to the\u00a0onDraw()\u00a0event.\n          "
                },
                {
                    "name": "visible",
                    "readonly": false,
                    "type": "Boolean",
                    "array": false,
                    "description": "True if this element is shown, false if it is hidden.",
                    "longdesc": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown."
                },
                {
                    "name": "bounds",
                    "readonly": false,
                    "type": "Bounds",
                    "array": false,
                    "description": "The boundaries of the element, in parent-relative coordinates. ",
                    "longdesc": "Setting an element's size or location changes its bounds property, and vice-versa."
                },
                {
                    "name": "location",
                    "readonly": false,
                    "type": "Point",
                    "array": false,
                    "description": "The upper left corner of this element relative to its parent.",
                    "longdesc": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa. "
                },
                {
                    "name": "maximumSize",
                    "readonly": false,
                    "type": "Dimension",
                    "array": false,
                    "description": " The maximum height and width to which the element can be resized."
                },
                {
                    "name": "minimumSize",
                    "readonly": false,
                    "type": "Dimension",
                    "array": false,
                    "description": " The minimum height and width to which the element can be resized."
                },
                {
                    "name": "preferredSize",
                    "readonly": false,
                    "type": "Dimension",
                    "array": false,
                    "description": "The preferred size, used by layout managers to determine the best size for each element.",
                    "longdesc": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default. "
                },
                {
                    "name": "size",
                    "readonly": false,
                    "type": "Dimension",
                    "array": false,
                    "description": "The current dimensions of this element.",
                    "longdesc": "\n            Initially undefined, and unless explicitly set by a script, it is defined by a\u00a0LayoutManager\u00a0. A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.\n          "
                },
                {
                    "name": "windowBounds",
                    "readonly": true,
                    "type": "Bounds",
                    "array": false,
                    "description": "The bounds of this element relative to the top-level parent window."
                },
                {
                    "name": "alignment",
                    "readonly": false,
                    "type": "String",
                    "array": false,
                    "description": "\n            The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.\n          ",
                    "longdesc": "\n            This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive.\n            \n              For orientation=row:top, bottom, fill\n            \n            \n              For orientation=column: left, right, fill\n            \n            \n              For orientation=stack:top, bottom, left, right, fill\n            \n          "
                },
                {
                    "name": "children",
                    "readonly": true,
                    "type": "Object",
                    "array": true,
                    "description": "An array of child elements."
                },
                {
                    "name": "properties",
                    "readonly": false,
                    "type": "Object",
                    "array": false,
                    "description": "An object that contains one or more creation properties of the container (properties used only when the element is created). ",
                    "longdesc": "\n            Creation properties of a DropDownList object can include:\n            \n              items: An array of strings for the text of each list item. An item object is created for each item. An item with the text string \"-\" creates a separator item. Supply this property, or the items argument to the\u00a0add()\u00a0method, not both. This form is most useful for elements defined using Resource Specifications.\n            \n          "
                },
                {
                    "name": "enabled",
                    "readonly": false,
                    "type": "Boolean",
                    "array": false,
                    "description": "True if this element is enabled.",
                    "longdesc": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance. "
                },
                {
                    "name": "helpTip",
                    "readonly": false,
                    "type": "String",
                    "array": false,
                    "description": "The help text that is displayed when the mouse hovers over the element."
                },
                {
                    "name": "indent",
                    "readonly": false,
                    "type": "Number",
                    "array": false,
                    "description": "The number of pixels to indent the element during automatic layout.",
                    "longdesc": "Applies for column orientation and left alignment, or row orientation and top alignment."
                },
                {
                    "name": "parent",
                    "readonly": true,
                    "type": "Object",
                    "array": false,
                    "description": "The parent element."
                },
                {
                    "name": "window",
                    "readonly": true,
                    "type": "Window",
                    "array": false,
                    "description": "The window that this element belongs to."
                },
                {
                    "name": "type",
                    "readonly": true,
                    "type": "String",
                    "array": false,
                    "description": "The element type; \"dropdownlist\"."
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "parameters": [
                        {
                            "name": "type",
                            "type": "String",
                            "array": false,
                            "optional": false,
                            "description": "The type of the child element.",
                            "longdesc": "\n                Either item (a basic, selectable item with a text label) or separator\n              "
                        },
                        {
                            "name": "text",
                            "type": "String",
                            "array": false,
                            "optional": true,
                            "description": "The localizable text label for the item. "
                        }
                    ],
                    "description": " Adds an item or separator to the choices in this list.",
                    "longdesc": "Returns the item control object for type=\"item\", or null for type=\"separator\".",
                    "type": "ListItem",
                    "array": false
                },
                {
                    "name": "find",
                    "parameters": [
                        {
                            "name": "text",
                            "type": "String",
                            "array": false,
                            "optional": false,
                            "description": "The text string to match."
                        }
                    ],
                    "description": "Retrieves an item object from the list that has a given text label.",
                    "type": "ListItem",
                    "array": false
                },
                {
                    "name": "remove",
                    "parameters": [
                        {
                            "name": "what",
                            "type": "Mixed",
                            "array": false,
                            "optional": false,
                            "description": "\n                The item or child to remove, specified by 0-based index, text value, or as a\u00a0ListItem\u00a0object.\n              "
                        }
                    ],
                    "description": "Removes a child item from the list."
                },
                {
                    "name": "removeAll",
                    "parameters": [],
                    "description": "Removes all child items from the list."
                },
                {
                    "name": "notify",
                    "parameters": [
                        {
                            "name": "eventName",
                            "type": "String",
                            "array": false,
                            "optional": true,
                            "description": "The name of the control event handler to call. ",
                            "longdesc": "\n                One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.\n              "
                        }
                    ],
                    "description": "Sends a notification message, simulating the specified user interaction event. "
                },
                {
                    "name": "show",
                    "parameters": [],
                    "description": "Shows this element.",
                    "longdesc": " When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
                },
                {
                    "name": "hide",
                    "parameters": [],
                    "description": "Hides this element."
                },
                {
                    "name": "addEventListener",
                    "parameters": [
                        {
                            "name": "eventName",
                            "type": "String",
                            "array": false,
                            "optional": false,
                            "description": "The name of the event.",
                            "longdesc": "\n                Event names are listed in the JavaScript Tools Guide.\n              "
                        },
                        {
                            "name": "handler",
                            "type": "Function",
                            "array": false,
                            "optional": false,
                            "description": "The function that handles the event.",
                            "longdesc": "\n                This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the\u00a0UIEvent\u00a0object.\n              "
                        },
                        {
                            "name": "capturePhase",
                            "type": "Boolean",
                            "array": false,
                            "optional": false,
                            "description": "When true, the handler is called only in the capturing phase of the event propagation. ",
                            "longdesc": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "value": "false"
                        }
                    ],
                    "description": "Registers an event handler for a particular type of event occuring in this element.",
                    "type": "Boolean",
                    "array": false
                },
                {
                    "name": "removeEventListener",
                    "parameters": [
                        {
                            "name": "eventName",
                            "type": "String",
                            "array": false,
                            "optional": false,
                            "description": "The name of the event."
                        },
                        {
                            "name": "handler",
                            "type": "Function",
                            "array": false,
                            "optional": false,
                            "description": "The function that handles the event."
                        },
                        {
                            "name": "capturePhase",
                            "type": "Boolean",
                            "array": false,
                            "optional": false,
                            "description": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "value": "false"
                        }
                    ],
                    "description": "Unregisters an event handler for a particular type of event occuring in this element.",
                    "longdesc": " All arguments must be identical to those that were used to register the event handler.",
                    "type": "Boolean",
                    "array": false
                },
                {
                    "name": "dispatchEvent",
                    "parameters": [],
                    "description": "Simulates the occurrence of an event in this target. ",
                    "longdesc": "\n            A script can create a\u00a0UIEvent\u00a0object for a specific event and pass it to this method to start the event propagation for the event.\n          ",
                    "type": "Event",
                    "array": false
                }
            ]
        }
    },
    "description": "Displays a single visible item. When you click the control, a list drops down or pops up, and allows you to select one of the other items in the list.",
    "longdesc": "\n        Drop-down lists can have nonselectable separator items for visually separating groups of related items, as in a menu. You can specify the items on creation of the list object, or afterward using the list object\u2019s\u00a0add()\u00a0method. You can remove items programmatically with the list object\u2019s remove() and removeAll() methods. Calls the\u00a0onChange()\u00a0callback if the item selection is changed or if its\u00a0notify()\u00a0method is called.\n      "
}