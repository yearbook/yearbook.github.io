{
  "name": "LibraryPanel",
  "dynamic": true,
  "superclass": {
    "href": "#/Panel",
    "$t": "Panel"
  },
  "shortdesc": "Library panel",
  "elements": [
    {
      "type": "instance",
      "property": [
        {
          "name": "associatedLibrary",
          "rwaccess": "readonly",
          "shortdesc": "The library displayed in this LibraryPanel",
          "datatype": {
            "type": "Library"
          }
        },
        {
          "name": "name",
          "rwaccess": "readonly",
          "shortdesc": "The name of the LibraryPanel.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "isValid",
          "rwaccess": "readonly",
          "shortdesc": "Returns true if the object specifier resolves to valid objects.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "parent",
          "rwaccess": "readonly",
          "shortdesc": "The parent of the LibraryPanel (a Application).",
          "datatype": {
            "type": "Application"
          }
        },
        {
          "name": "index",
          "rwaccess": "readonly",
          "shortdesc": "The index of the LibraryPanel within its containing object.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "events",
          "rwaccess": "readonly",
          "shortdesc": "A collection of events.",
          "datatype": {
            "type": "Events"
          }
        },
        {
          "name": "eventListeners",
          "rwaccess": "readonly",
          "shortdesc": "A collection of event listeners.",
          "datatype": {
            "type": "EventListeners"
          }
        },
        {
          "name": "view",
          "shortdesc": "LibraryPanel view",
          "datatype": {
            "type": "LibraryPanelViews"
          }
        },
        {
          "name": "sortOrder",
          "shortdesc": "The sort order of the assets in the LibraryPanel",
          "datatype": {
            "type": "SortAssets"
          }
        },
        {
          "name": "selection",
          "shortdesc": "The selected object(s). Can also accept: Object or NothingEnum enumerator.",
          "datatype": {
            "type": "Object",
            "array": true
          }
        },
        {
          "name": "visible",
          "shortdesc": "If true, the panel is visible.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "properties",
          "shortdesc": "A property that allows setting of several properties at the same time.",
          "datatype": {
            "type": "Object"
          }
        }
      ],
      "method": [
        {
          "name": "showAll",
          "shortdesc": "Show all assets"
        },
        {
          "name": "select",
          "shortdesc": "Selects the specified object(s).",
          "parameters": [
            {
              "name": "selectableItems",
              "shortdesc": "The objects to select. Can accept: Object, Array of Objects, NothingEnum enumerator or SelectAll enumerator.",
              "datatype": {
                "type": "Mixed"
              }
            },
            {
              "name": "existingSelection",
              "optional": true,
              "shortdesc": "The selection status of the LibraryPanel in relation to previously selected objects. ",
              "datatype": {
                "type": "SelectionOptions",
                "value": "SelectionOptions.REPLACE_WITH"
              }
            }
          ]
        },
        {
          "name": "toSource",
          "shortdesc": "Generates a string which, if executed, will return the LibraryPanel.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "getElements",
          "shortdesc": "Resolves the object specifier, creating an array of object references.",
          "datatype": {
            "type": "LibraryPanel",
            "array": true
          }
        },
        {
          "name": "toSpecifier",
          "shortdesc": "Retrieves the object specifier.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "addEventListener",
          "shortdesc": "Adds an event listener.",
          "parameters": [
            {
              "name": "eventType",
              "shortdesc": "The event type.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "handler",
              "shortdesc": "The event handler. Can accept: File or JavaScript Function.",
              "datatype": {
                "type": "Mixed"
              }
            },
            {
              "name": "captures",
              "optional": true,
              "shortdesc": "This parameter is obsolete. ",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "EventListener"
          }
        },
        {
          "name": "removeEventListener",
          "shortdesc": "Removes the event listener.",
          "parameters": [
            {
              "name": "eventType",
              "shortdesc": "The registered event type.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "handler",
              "shortdesc": "The registered event handler. Can accept: File or JavaScript Function.",
              "datatype": {
                "type": "Mixed"
              }
            },
            {
              "name": "captures",
              "optional": true,
              "shortdesc": "This parameter is obsolete. ",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "Boolean"
          }
        }
      ]
    }
  ]
}