{
  "name": "FindObjectPreference",
  "dynamic": true,
  "superclass": {
    "href": "#/Preference",
    "$t": "Preference"
  },
  "shortdesc": "Find object preferences.",
  "elements": [
    {
      "type": "instance",
      "property": [
        {
          "name": "transparencySettings",
          "rwaccess": "readonly",
          "shortdesc": "Transparency settings. Can return: FindChangeTransparencySetting or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strokeTransparencySettings",
          "rwaccess": "readonly",
          "shortdesc": "Transparency settings for the stroke. Can return: FindChangeStrokeTransparencySetting or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "fillTransparencySettings",
          "rwaccess": "readonly",
          "shortdesc": "Transparency settings for the fill applied to the FindObjectPreference. Can return: FindChangeFillTransparencySetting or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "contentTransparencySettings",
          "rwaccess": "readonly",
          "shortdesc": "Transparency settings for the content of the FindObjectPreference. Can return: FindChangeContentTransparencySetting or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "userModifiedWrap",
          "rwaccess": "readonly",
          "shortdesc": "If true, the text wrap path has been explicitly modified by the user. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "isValid",
          "rwaccess": "readonly",
          "shortdesc": "Returns true if the object specifier resolves to valid objects.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "parent",
          "rwaccess": "readonly",
          "shortdesc": "The parent of the FindObjectPreference (a Application).",
          "datatype": {
            "type": "Application"
          }
        },
        {
          "name": "preferences",
          "rwaccess": "readonly",
          "shortdesc": "A collection of preferences objects.",
          "datatype": {
            "type": "Preferences"
          }
        },
        {
          "name": "events",
          "rwaccess": "readonly",
          "shortdesc": "A collection of events.",
          "datatype": {
            "type": "Events"
          }
        },
        {
          "name": "eventListeners",
          "rwaccess": "readonly",
          "shortdesc": "A collection of event listeners.",
          "datatype": {
            "type": "EventListeners"
          }
        },
        {
          "name": "storyDirection",
          "shortdesc": "The direction of the story. Can return: StoryDirectionOptions enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "positionReferencePoint",
          "shortdesc": "The point in the referenced object relative to which to position the anchored object. Notes: Valid only when anchored position is custom. Can return: AnchorPoint enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "applyToMasterPageOnly",
          "shortdesc": "If true, text wraps on the master spread apply to that spread only, and not to any pages the master spread has been applied to. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "textWrapSide",
          "shortdesc": "Text wrap side options. Can return: TextWrapSideOptions enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "textWrapOffset",
          "shortdesc": "The minimum space between text and the edges of the wrapped object. Specify four values in the format [top, left, bottom, right]. . Can return: Ordered array containing top:Unit, left:Unit, bottom:Unit, right:Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "textWrapMode",
          "shortdesc": "The text wrap mode. . Can return: TextWrapModes enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "appliedObjectStyles",
          "shortdesc": "The applied object style(s). Can return: String or NothingEnum enumerator. Can also accept: ObjectStyle.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "fillColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the fill of the FindObjectPreference. . Can return: Swatch or NothingEnum enumerator. Can also accept: String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "fillTint",
          "shortdesc": "The percent of tint to use in the FindObjectPreference's fill color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "overprintFill",
          "shortdesc": "If true, the FindObjectPreference's fill color overprints any underlying objects. If false, the fill color knocks out the underlying colors. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strokeWeight",
          "shortdesc": "The weight (in points) to apply to the FindObjectPreference's stroke. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "miterLimit",
          "shortdesc": "The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join. Can return: Real (1 - 500) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed",
            "value": 4
          }
        },
        {
          "name": "endCap",
          "shortdesc": "The end shape of an open path. Can return: EndCap enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "endJoin",
          "shortdesc": "The corner join applied to the FindObjectPreference. Can return: EndJoin enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strokeType",
          "shortdesc": "The name of the stroke style to apply. Can return: StrokeStyle or NothingEnum enumerator. Can also accept: String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strokeCornerAdjustment",
          "shortdesc": "The corner adjustment applied to the FindObjectPreference. Can return: StrokeCornerAdjustment enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strokeDashAndGap",
          "shortdesc": "The dash and gap measurements that define the pattern of a custom dashed line. Define up to six values (in points) in the format [dash1, gap1, dash2, gap2, dash3, gap3]. Can return: Array of Units or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "leftLineEnd",
          "shortdesc": "The arrowhead applied to the start of the path. . Can return: ArrowHead enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rightLineEnd",
          "shortdesc": "The arrowhead applied to the end of the path. Can return: ArrowHead enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strokeColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the FindObjectPreference. Can return: Swatch or NothingEnum enumerator. Can also accept: String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strokeTint",
          "shortdesc": "The percent of tint to use in object's stroke color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "overprintStroke",
          "shortdesc": "If true, the FindObjectPreference's stroke color overprints any underlying objects. If false, the stroke color knocks out the  underlying colors. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gapColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the gap of a dashed, dotted, or striped stroke. For information, see stroke type. Can return: Swatch or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gapTint",
          "shortdesc": "The tint as a percentage of the gap color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "overprintGap",
          "shortdesc": "If true, the gap color overprints any underlying colors. If false, the gap color knocks out the underlying colors. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strokeAlignment",
          "shortdesc": "The stroke alignment applied to the FindObjectPreference. Can return: StrokeAlignment enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "nonprinting",
          "shortdesc": "If true, the FindObjectPreference does not print. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gradientFillAngle",
          "shortdesc": "The angle of a linear gradient applied to the fill of the FindObjectPreference. (Range: -180 to 180). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gradientStrokeAngle",
          "shortdesc": "The angle of a linear gradient applied to the stroke of the FindObjectPreference. (Range: -180 to 180). Can return: Real or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "textColumnCount",
          "shortdesc": "The number of columns in the text frame. Note: Depending on the value of use fixed column width, the number of columns can change automatically when the text frame size changes. Can return: Long Integer (1 - 40) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "textColumnGutter",
          "shortdesc": "The space between columns in the text frame. Can return: Unit (0 - 8640 points) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "textColumnFixedWidth",
          "shortdesc": "The column width of the columns in the text frame. Can return: Unit (0 - 8640 points) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "useFixedColumnWidth",
          "shortdesc": "If true, maintains column width when the text frame is resized. If false, causes columns to resize when the text frame is resized. Note: When true, resizing the frame can change the number of columns in the frame. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "insetSpacing",
          "shortdesc": "The amount to offset text from the edges of the text frame, specified either as a single value applied uniformly to all sides of the text frame or as an array of 4 values in the format [top inset, left inset, bottom inset, right inset]. Can return: Unit (0 - 8640 points), Array of 4 Units (0 - 8640 points) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "firstBaselineOffset",
          "shortdesc": "The distance between the baseline of the text and the top inset of the text frame or cell. Can return: FirstBaseline enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "minimumFirstBaselineOffset",
          "shortdesc": "The minimum distance between the baseline of the text and the top inset of the text frame or cell. Can return: Unit (0 - 8640 points) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "verticalJustification",
          "shortdesc": "The vertical alignment of the text content. . Can return: VerticalJustification enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "verticalThreshold",
          "shortdesc": "The maximum amount of vertical space between two paragraphs. Note: Valid only when vertical justification is justified; the specified amount is applied in addition to the space before or space after values defined for the paragraph. Can return: Unit (0 - 8640 points) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ignoreWrap",
          "shortdesc": "If true, ignores text wrap settings for drawn or placed objects in the text frame. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "useCustomBaselineFrameGrid",
          "shortdesc": "If true, uses a custom baseline frame grid. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "startingOffsetForBaselineFrameGrid",
          "shortdesc": "The amount to offset the baseline grid. Can return: Unit (0 - 8640 points) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "baselineFrameGridRelativeOption",
          "shortdesc": "The location (top of page, top margin, top of frame, or frame inset) on which to base the custom baseline grid. Can return: BaselineFrameGridRelativeOption enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "baselineFrameGridIncrement",
          "shortdesc": "The distance between grid lines. Can return: Unit (1 - 8640 points) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "baselineFrameGridColor",
          "shortdesc": "The grid line color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Can return: Array of 3 Reals (0 - 255) or UIColors enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "inverse",
          "shortdesc": "If true, inverts the text wrap. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "contourType",
          "shortdesc": "The contour type. Can return: ContourOptionsTypes enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "includeInsideEdges",
          "shortdesc": "If true, creates interior clipping paths within the surrounding clipping path. Note: Valid only when clipping type is alpha channel or detect edges. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "anchoredPosition",
          "shortdesc": "The position of the anchored object relative to the anchor. Can return: AnchorPosition enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "spineRelative",
          "shortdesc": "If true, the position of the anchored object is relative to the binding spine of the page or spread. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "lockPosition",
          "shortdesc": "If true, prevents manual positioning of the anchored object. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "pinPosition",
          "shortdesc": "If true, pins the position of the anchored object within the text frame top and bottom. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "anchorPoint",
          "shortdesc": "The point in the anchored object to position. Can return: AnchorPoint enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "horizontalReferencePoint",
          "shortdesc": "The horizontal reference point on the page. Valid only when anchored position is custom. Can return: AnchoredRelativeTo enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "verticalReferencePoint",
          "shortdesc": "The vertical reference point on the page. Valid when anchored position is custom. Can return: VerticallyRelativeTo enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "anchorXoffset",
          "shortdesc": "The horizontal (x) offset of the anchored object. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "anchorYoffset",
          "shortdesc": "The vertical (y) offset of the anchored object. Corresponds to the space after property for above line positioning. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "anchorSpaceAbove",
          "shortdesc": "The space above an above-line anchored object. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "opticalMarginAlignment",
          "shortdesc": "If true, adjust the position of characters at the edges of the frame to provide a better appearance. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "opticalMarginSize",
          "shortdesc": "The point size used as the basis for calculating optical margin alignment. (Range: 0.1 to 1296). Can return: Unit (0.1 - 1296 points) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "leftCrop",
          "shortdesc": "The amount in measurement units to crop the left edge of a graphic. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "topCrop",
          "shortdesc": "The amount in measurement units to crop the top edge of a graphic. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rightCrop",
          "shortdesc": "The amount in measurement units to crop the right edge of a graphic. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "bottomCrop",
          "shortdesc": "The amount in measurement units to crop the bottom edge of a graphic. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "fittingOnEmptyFrame",
          "shortdesc": "The frame fitting option to apply to placed or pasted content if the frame is empty. Can be applied to a frame, object style, or document or to the application. Can return: EmptyFrameFittingOptions enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "fittingAlignment",
          "shortdesc": "The point with which to align the image empty when fitting in a frame. For information, see frame fitting options. Can return: AnchorPoint enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "topLeftCornerOption",
          "shortdesc": "The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight. Can return: CornerOptions enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "topRightCornerOption",
          "shortdesc": "The shape to apply to the top right corner of rectangular shapes. Can return: CornerOptions enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "bottomLeftCornerOption",
          "shortdesc": "The shape to apply to the bottom left corner of rectangular shapes. Can return: CornerOptions enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "bottomRightCornerOption",
          "shortdesc": "The shape to apply to the bottom right corner of rectangular shapes. Can return: CornerOptions enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "topLeftCornerRadius",
          "shortdesc": "The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "topRightCornerRadius",
          "shortdesc": "The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "bottomLeftCornerRadius",
          "shortdesc": "The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "bottomRightCornerRadius",
          "shortdesc": "The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "autoSizingType",
          "shortdesc": "Auto-sizing type of text frame. Based on type, reference value is automatically adjusted. For example, for height only type, top-left reference point becomes top-center. Recommended to change auto-sizing type, after setting other auto-sizing attributes. Can return: AutoSizingTypeEnum enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "autoSizingReferencePoint",
          "shortdesc": "The reference point for auto sizing of text frame. Reference point is automatically adjusted to the suitable value depending on the auto-sizing type value. As an example, top left reference point becomes top center for height only dimension. Can return: AutoSizingReferenceEnum enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "useMinimumHeightForAutoSizing",
          "shortdesc": "If true, minimum height value is used during the auto-sizing of text frame. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "minimumHeightForAutoSizing",
          "shortdesc": "The minimum height for auto-sizing of the text frame. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "useMinimumWidthForAutoSizing",
          "shortdesc": "If true, minimum width value is used during the auto-sizing of text frame. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "minimumWidthForAutoSizing",
          "shortdesc": "The minimum width for auto-sizing of the text frame. Can return: Unit or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "useNoLineBreaksForAutoSizing",
          "shortdesc": "If true, line-breaks are not introduced after auto sizing. . Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "altTextSourceType",
          "shortdesc": "The source type of alternate text. Can return: SourceType enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "actualTextSourceType",
          "shortdesc": "The source type of actual text. Can return: SourceType enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "customAltText",
          "shortdesc": "The custom alternate text entered by the user. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "customActualText",
          "shortdesc": "The custom actual text entered by the user. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "altMetadataProperty",
          "shortdesc": "The metadata property to use as source of alternate text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "actualMetadataProperty",
          "shortdesc": "The metadata property to use as source of actual text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "applyTagType",
          "shortdesc": "The tag type of page item. Can return: TagType enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "customImageConversion",
          "shortdesc": "If true, custom image conversion is enabled for object. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "imageConversionType",
          "shortdesc": "Allows user to select the image format for conversion. Can return: ImageFormat enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "customImageSizeOption",
          "shortdesc": "Allows user to select the image size option for conversion. Can return: ImageSizeOption enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "imageExportResolution",
          "shortdesc": "The export resolution. Can return: ImageResolution enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gifOptionsPalette",
          "shortdesc": "The color palette for GIF conversion. Note: Not valid when image conversion is JPEG. . Can return: GIFOptionsPalette enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "gifOptionsInterlaced",
          "shortdesc": "If true, generates interlaced GIFs. Note: Not valid  when image conversion is JPEG. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "jpegOptionsQuality",
          "shortdesc": "The quality of converted JPEG images. Note: Not valid when image conversion is GIF. . Can return: JPEGOptionsQuality enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "jpegOptionsFormat",
          "shortdesc": "The formatting method for converted JPEG images. Note: Not valid  when image conversion is GIF. Can return: JPEGOptionsFormat enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "imageAlignment",
          "shortdesc": "Alignment applied to images. Can return: ImageAlignmentType enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "imageSpaceBefore",
          "shortdesc": "Space Before applied to images. Can return: Real (0 - 8640) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "imageSpaceAfter",
          "shortdesc": "Space After applied to images. Can return: Real (0 - 8640) or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "useImagePageBreak",
          "shortdesc": "If true, image page break settings will be used in objects. Can return: Boolean or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "imagePageBreak",
          "shortdesc": "Image page break settings to be used with objects. Can return: ImagePageBreakType enumerator or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "properties",
          "shortdesc": "A property that allows setting of several properties at the same time.",
          "datatype": {
            "type": "Object"
          }
        }
      ],
      "method": [
        {
          "name": "altText",
          "shortdesc": "Provides the alternate text for the object",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "actualText",
          "shortdesc": "Provides the actual text for the object",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "toSource",
          "shortdesc": "Generates a string which, if executed, will return the FindObjectPreference.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "getElements",
          "shortdesc": "Resolves the object specifier, creating an array of object references.",
          "datatype": {
            "type": "FindObjectPreference",
            "array": true
          }
        },
        {
          "name": "toSpecifier",
          "shortdesc": "Retrieves the object specifier.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "addEventListener",
          "shortdesc": "Adds an event listener.",
          "parameters": [
            {
              "name": "eventType",
              "shortdesc": "The event type.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "handler",
              "shortdesc": "The event handler. Can accept: File or JavaScript Function.",
              "datatype": {
                "type": "Mixed"
              }
            },
            {
              "name": "captures",
              "optional": true,
              "shortdesc": "This parameter is obsolete. ",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "EventListener"
          }
        },
        {
          "name": "removeEventListener",
          "shortdesc": "Removes the event listener.",
          "parameters": [
            {
              "name": "eventType",
              "shortdesc": "The registered event type.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "handler",
              "shortdesc": "The registered event handler. Can accept: File or JavaScript Function.",
              "datatype": {
                "type": "Mixed"
              }
            },
            {
              "name": "captures",
              "optional": true,
              "shortdesc": "This parameter is obsolete. ",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "Boolean"
          }
        }
      ]
    }
  ]
}