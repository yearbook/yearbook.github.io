{
    "dynamic": true,
    "elements": {
        "class": {
            "properties": []
        },
        "instance": {
            "methods": [
                {
                    "parameters": [
                        {
                            "optional": false,
                            "array": false,
                            "name": "replacingWith",
                            "description": "The style to apply in place of the deleted style. (Optional)",
                            "type": "CharacterStyle"
                        }
                    ],
                    "name": "remove",
                    "description": "Deletes the style."
                },
                {
                    "array": false,
                    "parameters": [],
                    "name": "duplicate",
                    "description": "Duplicates the CharacterStyle.",
                    "type": "CharacterStyle"
                },
                {
                    "array": false,
                    "parameters": [
                        {
                            "optional": false,
                            "array": false,
                            "name": "to",
                            "description": "The location relative to the reference object or within the containing object.",
                            "type": "LocationOptions"
                        },
                        {
                            "optional": false,
                            "array": false,
                            "name": "reference",
                            "description": "The reference object. Note: Required when the to parameter specifies before or after. Can accept: ParagraphStyle, ParagraphStyleGroup, CharacterStyle, CharacterStyleGroup, CellStyle, CellStyleGroup, TableStyle, TableStyleGroup, Document or Application. (Optional)",
                            "type": "Mixed"
                        }
                    ],
                    "name": "move",
                    "description": "Moves the style to the specified location.",
                    "type": "CharacterStyle"
                },
                {
                    "parameters": [
                        {
                            "optional": false,
                            "array": false,
                            "name": "key",
                            "description": "The key.",
                            "type": "String"
                        },
                        {
                            "optional": false,
                            "array": false,
                            "name": "value",
                            "description": "The value.",
                            "type": "String"
                        }
                    ],
                    "name": "insertLabel",
                    "description": "Sets the label to the value associated with the specified key."
                },
                {
                    "array": false,
                    "parameters": [
                        {
                            "optional": false,
                            "array": false,
                            "name": "key",
                            "description": "The key.",
                            "type": "String"
                        }
                    ],
                    "name": "extractLabel",
                    "description": "Gets the label value associated with the specified key.",
                    "type": "String"
                },
                {
                    "array": false,
                    "parameters": [],
                    "name": "toSource",
                    "description": "Generates a string which, if executed, will return the CharacterStyle.",
                    "type": "String"
                },
                {
                    "array": true,
                    "parameters": [],
                    "name": "getElements",
                    "description": "Resolves the object specifier, creating an array of object references.",
                    "type": "CharacterStyle"
                },
                {
                    "array": false,
                    "parameters": [],
                    "name": "toSpecifier",
                    "description": "Retrieves the object specifier.",
                    "type": "String"
                },
                {
                    "array": false,
                    "parameters": [
                        {
                            "optional": false,
                            "array": false,
                            "name": "eventType",
                            "description": "The event type.",
                            "type": "String"
                        },
                        {
                            "optional": false,
                            "array": false,
                            "name": "handler",
                            "description": "The event handler. Can accept: File or JavaScript Function.",
                            "type": "Mixed"
                        },
                        {
                            "optional": true,
                            "value": "false",
                            "array": false,
                            "name": "captures",
                            "description": "This parameter is obsolete. (Optional)",
                            "type": "Boolean"
                        }
                    ],
                    "name": "addEventListener",
                    "description": "Adds an event listener.",
                    "type": "EventListener"
                },
                {
                    "array": false,
                    "parameters": [
                        {
                            "optional": false,
                            "array": false,
                            "name": "eventType",
                            "description": "The registered event type.",
                            "type": "String"
                        },
                        {
                            "optional": false,
                            "array": false,
                            "name": "handler",
                            "description": "The registered event handler. Can accept: File or JavaScript Function.",
                            "type": "Mixed"
                        },
                        {
                            "optional": true,
                            "value": "false",
                            "array": false,
                            "name": "captures",
                            "description": "This parameter is obsolete. (Optional)",
                            "type": "Boolean"
                        }
                    ],
                    "name": "removeEventListener",
                    "description": "Removes the event listener.",
                    "type": "Boolean"
                }
            ],
            "properties": [
                {
                    "readonly": true,
                    "array": false,
                    "name": "imported",
                    "description": "If true, the style was imported from another document. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": true,
                    "array": false,
                    "name": "id",
                    "description": "The unique ID of the CharacterStyle.",
                    "type": "Number"
                },
                {
                    "readonly": true,
                    "array": false,
                    "name": "isValid",
                    "description": "Returns true if the object specifier resolves to valid objects.",
                    "type": "Boolean"
                },
                {
                    "readonly": true,
                    "array": false,
                    "name": "parent",
                    "description": "The parent of the CharacterStyle (a Document, Application or CharacterStyleGroup).",
                    "type": "Mixed"
                },
                {
                    "readonly": true,
                    "array": false,
                    "name": "index",
                    "description": "The index of the CharacterStyle within its containing object.",
                    "type": "Number"
                },
                {
                    "readonly": true,
                    "array": false,
                    "name": "styleExportTagMaps",
                    "description": "A collection of style export tag maps.",
                    "type": "StyleExportTagMaps"
                },
                {
                    "readonly": true,
                    "array": false,
                    "name": "events",
                    "description": "A collection of events.",
                    "type": "Events"
                },
                {
                    "readonly": true,
                    "array": false,
                    "name": "eventListeners",
                    "description": "A collection of event listeners.",
                    "type": "EventListeners"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "basedOn",
                    "description": "The style that this style is based on. Can return: CharacterStyle or String.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "appliedFont",
                    "description": "The font applied to the CharacterStyle, specified as either a font object or the name of font family. Can return: Font, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "fontStyle",
                    "description": "The name of the font style. Can return: String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "pointSize",
                    "description": "The text size. Can return: Unit or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "leading",
                    "description": "The leading applied to the text. Can return: Unit, Leading enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kerningMethod",
                    "description": "The type of pair kerning. Can return: String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "tracking",
                    "description": "The amount by which to loosen or tighten a block of text, specified in thousands of an em. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "capitalization",
                    "description": "The capitalization scheme. Can return: Capitalization enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "position",
                    "description": "The text position relative to the baseline. Can return: Position enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "underline",
                    "description": "If true, underlines the text. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strikeThru",
                    "description": "If true, draws a strikethrough line through the text. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "ligatures",
                    "description": "If true, replaces specific character combinations (e.g., fl, fi) with ligature characters. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "noBreak",
                    "description": "If true, keeps the text on the same line. . Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "horizontalScale",
                    "description": "The horizontal scaling applied to the CharacterStyle. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "verticalScale",
                    "description": "The vertical scaling applied to the CharacterStyle. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "baselineShift",
                    "description": "The baseline shift applied to the text. Can return: Unit or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "skew",
                    "description": "The skew angle of the CharacterStyle. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "fillTint",
                    "description": "The tint (as a percentage) of the fill color of the CharacterStyle. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.). Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strokeTint",
                    "description": "The tint (as a percentage) of the stroke color of the CharacterStyle. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.). Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strokeWeight",
                    "description": "The stroke weight applied to the characters of the text. Can return: Unit or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "overprintStroke",
                    "description": "If true, the stroke of the characters will overprint. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "overprintFill",
                    "description": "If true, the fill color of the characters will overprint. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfFigureStyle",
                    "description": "The figure style in OpenType fonts. Can return: OTFFigureStyle enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfOrdinal",
                    "description": "If true, uses ordinals in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfFraction",
                    "description": "If true, uses fractions in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfDiscretionaryLigature",
                    "description": "If true, uses discretionary ligatures in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfTitling",
                    "description": "If true, uses titling forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfContextualAlternate",
                    "description": "If true, uses contextual alternate forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfSwash",
                    "description": "If true, uses swash forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "underlineColor",
                    "description": "The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. . Can return: Swatch, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "underlineGapColor",
                    "description": "The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid. Can return: Swatch, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "underlineTint",
                    "description": "The underline stroke tint (as a percentage). (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "underlineGapTint",
                    "description": "The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "underlineOverprint",
                    "description": "If true, the underline stroke color will overprint. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "underlineGapOverprint",
                    "description": "If true, the gap color of the underline stroke will overprint. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "underlineType",
                    "description": "The stroke type of the underline stroke. Can return: StrokeStyle, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "underlineOffset",
                    "description": "The amount by which to offset the underline from the text baseline. Can return: Unit or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "underlineWeight",
                    "description": "The stroke weight of the underline stroke. Can return: Unit or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strikeThroughColor",
                    "description": "The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke. Can return: Swatch, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strikeThroughGapColor",
                    "description": "The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke. Can return: Swatch, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strikeThroughTint",
                    "description": "The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strikeThroughGapTint",
                    "description": "The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strikeThroughOverprint",
                    "description": "If true, the strikethrough stroke will overprint. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strikeThroughGapOverprint",
                    "description": "If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strikeThroughType",
                    "description": "The stroke type of the strikethrough stroke. Can return: StrokeStyle, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strikeThroughOffset",
                    "description": "The amount by which to offset the strikethrough stroke from the text baseline. Can return: Unit or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strikeThroughWeight",
                    "description": "The stroke weight of the strikethrough stroke. Can return: Unit or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "fillColor",
                    "description": "The swatch (color, gradient, tint, or mixed ink) applied to the fill of the CharacterStyle. . Can return: Swatch or NothingEnum enumerator. Can also accept: String.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strokeColor",
                    "description": "The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the CharacterStyle. Can return: Swatch or NothingEnum enumerator. Can also accept: String.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "appliedLanguage",
                    "description": "The language of the text. Can return: LanguageWithVendors, Language or NothingEnum enumerator. Can also accept: String.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfSlashedZero",
                    "description": "If true, use a slashed zeroes in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfHistorical",
                    "description": "If true, use historical forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfStylisticSets",
                    "description": "The stylistic sets to use in OpenType fonts. Can return: Long Integer or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "gradientFillLength",
                    "description": "The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "gradientFillAngle",
                    "description": "The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180). Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "gradientStrokeLength",
                    "description": "The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "gradientStrokeAngle",
                    "description": "The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180). Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "gradientFillStart",
                    "description": "The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y]. Can return: Array of 2 Units or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "gradientStrokeStart",
                    "description": "The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y]. Can return: Array of 2 Units or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfMark",
                    "description": "If true, uses mark positioning in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfLocale",
                    "description": "If true, uses localized forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "positionalForm",
                    "description": "The OpenType positional form. Can return: PositionalForms enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "name",
                    "description": "The name of the style.",
                    "type": "String"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "previewColor",
                    "description": "The color to use for preview, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Can return: Array of 3 Reals (0 - 255) or UIColors enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "value": "4",
                    "array": false,
                    "name": "miterLimit",
                    "description": "The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join. Can return: Real (0 - 1000) or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "strokeAlignment",
                    "description": "The stroke alignment applied to the text. Can return: TextStrokeAlign enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "endJoin",
                    "description": "The stroke join type applied to the characters of the text. Can return: OutlineJoin enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfOverlapSwash",
                    "description": "If true, use overlapping swash forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfStylisticAlternate",
                    "description": "If true, use stylistic alternate forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfJustificationAlternate",
                    "description": "If true, use alternate justification forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfStretchedAlternate",
                    "description": "If true, use stretched alternate forms in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "characterDirection",
                    "description": "The direction of the character. Can return: CharacterDirectionOptions enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "keyboardDirection",
                    "description": "The keyboard direction of the character. Can return: CharacterDirectionOptions enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "digitsType",
                    "description": "The digits type. Can return: DigitsTypeOptions enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kashidas",
                    "description": "Use of Kashidas for justification. Can return: KashidasOptions enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "diacriticPosition",
                    "description": "Position of diacriticical characters. Can return: DiacriticPositionOptions enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "xOffsetDiacritic",
                    "description": "The x (horizontal) offset for diacritic adjustment. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "yOffsetDiacritic",
                    "description": "The y (vertical) offset for diacritic adjustment. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "characterAlignment",
                    "description": "The alignment of small characters to the largest character in the line. Can return: CharacterAlignment enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "tsume",
                    "description": "The amount of horizontal character compression. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "leadingAki",
                    "description": "The amount of space before each character. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "trailingAki",
                    "description": "The amount of space after each character. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "characterRotation",
                    "description": "The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "jidori",
                    "description": "The number of grid squares in which to arrange the text. . Can return: Short Integer or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "shataiMagnification",
                    "description": "The amount (as a percentage) of shatai obliquing to apply. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "shataiDegreeAngle",
                    "description": "The shatai lens angle (in degrees). Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "shataiAdjustRotation",
                    "description": "If true, applies shatai rotation. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "shataiAdjustTsume",
                    "description": "If true, adjusts shatai tsume. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "tatechuyoko",
                    "description": "If true, makes the character horizontal in vertical text. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "tatechuyokoXOffset",
                    "description": "The horizontal offset for horizontal characters in vertical text. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "tatechuyokoYOffset",
                    "description": "The vertical offset for horizontal characters in vertical text. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenFillColor",
                    "description": "The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters. Can return: Swatch, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenStrokeColor",
                    "description": "The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters. Can return: Swatch, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenTint",
                    "description": "The fill tint (as a percentage) of kenten characters. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenStrokeTint",
                    "description": "The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenWeight",
                    "description": "The stroke weight (in points) of kenten characters. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenOverprintFill",
                    "description": "The method of overprinting the kenten fill. Can return: AdornmentOverprint enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenOverprintStroke",
                    "description": "The method of overprinting the kenten stroke. Can return: AdornmentOverprint enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenKind",
                    "description": "The style of kenten characters. Can return: KentenCharacter enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenPlacement",
                    "description": "The distance between kenten characters and their parent characters. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenAlignment",
                    "description": "The alignment of kenten characters relative to the parent characters. . Can return: KentenAlignment enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenPosition",
                    "description": "The kenten position relative to the parent character. Can return: RubyKentenPosition enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenFont",
                    "description": "The font to use for kenten characters. Can return: Font, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenFontStyle",
                    "description": "The font style of kenten characters. Can return: String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenFontSize",
                    "description": "The size (in points) of kenten characters. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenXScale",
                    "description": "The horizontal size of kenten characters as a percent of the original size. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenYScale",
                    "description": "The vertical size of kenten charachers as a percent of the original size. . Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenCustomCharacter",
                    "description": "The character used for kenten. Note: Valid only when kenten kind is custom. Can return: String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "kentenCharacterSet",
                    "description": "The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. . Can return: KentenCharacterSet enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyFill",
                    "description": "The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters. Can return: Swatch, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyStroke",
                    "description": "The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters. Can return: Swatch, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyTint",
                    "description": "The tint (as a percentage) of the ruby fill color. (Range: 0 to 100). Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyWeight",
                    "description": "The stroke weight (in points) of ruby characters. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyOverprintFill",
                    "description": "The method of overprinting the ruby fill. Can return: AdornmentOverprint enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyOverprintStroke",
                    "description": "The method of overprinting the ruby stroke. Can return: AdornmentOverprint enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyStrokeTint",
                    "description": "The stroke tint (as a percentage) of ruby characters. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyFont",
                    "description": "The font applied to ruby characters. Can return: Font, String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyFontStyle",
                    "description": "The font style of ruby characters. Can return: String or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyFontSize",
                    "description": "The size (in points) of ruby characters. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyOpenTypePro",
                    "description": "If true, uses OpenType Pro fonts for ruby. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyXScale",
                    "description": "The horizontal size of ruby characters, specified as a percent of the original size. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyYScale",
                    "description": "The vertical size of ruby characters, specified as a percent of the original size. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyType",
                    "description": "The ruby type. Can return: RubyTypes enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyAlignment",
                    "description": "The ruby alignment. Can return: RubyAlignments enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyPosition",
                    "description": "The position of ruby characters relative to the parent text. Can return: RubyKentenPosition enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyXOffset",
                    "description": "The amount of horizontal space between ruby and parent characters. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyYOffset",
                    "description": "The amount of vertical space between ruby and parent characters. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyParentSpacing",
                    "description": "The ruby spacing relative to the parent text. . Can return: RubyParentSpacing enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyAutoAlign",
                    "description": "If true, auto aligns ruby. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyOverhang",
                    "description": "If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. . Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyAutoScaling",
                    "description": "If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. . Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyParentScalingPercent",
                    "description": "The amount (as a percentage) to scale the parent text size to determine the ruby text size. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyParentOverhangAmount",
                    "description": "The amount by which ruby characters can overhang the parent text. Can return: RubyOverhang enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "warichu",
                    "description": "If true, turns on warichu. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "warichuSize",
                    "description": "The amount (as a percentage) to scale parent text size to determine warichu size. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "warichuLines",
                    "description": "The number of lines of warichu within a single normal line. Can return: Short Integer or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "warichuLineSpacing",
                    "description": "The gap between lines of warichu characters. Can return: Real or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "warichuAlignment",
                    "description": "The warichu alignment. Can return: WarichuAlignment enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "warichuCharsAfterBreak",
                    "description": "The minimum number of characters allowed after a line break. . Can return: Short Integer or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "warichuCharsBeforeBreak",
                    "description": "The minimum number of characters allowed before a line break. Can return: Short Integer or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfProportionalMetrics",
                    "description": "If true, kerns according to proportional CJK metrics in OpenType fonts. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfHVKana",
                    "description": "If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. . Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "otfRomanItalics",
                    "description": "If true, applies italics to half-width alphanumerics. . Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "scaleAffectsLineHeight",
                    "description": "If true, the line changes size when characters are scaled. . Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "cjkGridTracking",
                    "description": "If true, uses grid tracking to track non-Roman characters in CJK grids. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "glyphForm",
                    "description": "The glyph variant to substitute for standard glyphs. Can return: AlternateGlyphForms enumerator or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyAutoTcyDigits",
                    "description": "The number of digits included in auto tcy (tate-chuu-yoko) in ruby. Can return: Short Integer or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyAutoTcyIncludeRoman",
                    "description": "If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "rubyAutoTcyAutoScale",
                    "description": "If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em. Can return: Boolean or NothingEnum enumerator.",
                    "type": "Mixed"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "label",
                    "description": "A property that can be set to any string.",
                    "type": "String"
                },
                {
                    "readonly": false,
                    "array": false,
                    "name": "properties",
                    "description": "A property that allows setting of several properties at the same time.",
                    "type": "Object"
                }
            ]
        }
    },
    "name": "CharacterStyle",
    "description": "A character style."
}