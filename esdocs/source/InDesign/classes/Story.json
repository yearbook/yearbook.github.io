{
  "name": "Story",
  "dynamic": true,
  "shortdesc": "A story.",
  "elements": [
    {
      "type": "class",
      "property": [
        {
          "name": "BEFORE_PLACE",
          "rwaccess": "readonly",
          "shortdesc": "Dispatched before a Story is placed. This event bubbles. This event is cancelable.",
          "datatype": {
            "type": "String",
            "value": "beforePlace"
          }
        },
        {
          "name": "AFTER_PLACE",
          "rwaccess": "readonly",
          "shortdesc": "Dispatched after a Story is placed. This event bubbles. This event is not cancelable.",
          "datatype": {
            "type": "String",
            "value": "afterPlace"
          }
        }
      ]
    },
    {
      "type": "instance",
      "property": [
        {
          "name": "associatedXMLElement",
          "rwaccess": "readonly",
          "shortdesc": "The XML element associated with the Story.",
          "datatype": {
            "type": "XMLItem"
          }
        },
        {
          "name": "storyPreferences",
          "rwaccess": "readonly",
          "shortdesc": "Story preference settings.",
          "datatype": {
            "type": "StoryPreference"
          }
        },
        {
          "name": "overflows",
          "rwaccess": "readonly",
          "shortdesc": "If true, the story has overset text.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "length",
          "rwaccess": "readonly",
          "shortdesc": "The number of objects in the collection.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "styleOverridden",
          "rwaccess": "readonly",
          "shortdesc": "If true, the applied style has been overridden with additional attributes.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "storyType",
          "rwaccess": "readonly",
          "shortdesc": "The type of story.",
          "datatype": {
            "type": "StoryTypes"
          }
        },
        {
          "name": "textContainers",
          "rwaccess": "readonly",
          "shortdesc": "Array of text frames or text paths. Can return: Array of TextFrames or TextPaths.",
          "datatype": {
            "type": "Mixed",
            "array": true
          }
        },
        {
          "name": "appliedNestedStyles",
          "rwaccess": "readonly",
          "shortdesc": "The applied character styles dictated by nested styles.",
          "datatype": {
            "type": "CharacterStyle",
            "array": true
          }
        },
        {
          "name": "linkedStoryOptions",
          "rwaccess": "readonly",
          "shortdesc": "Linked story options",
          "datatype": {
            "type": "LinkedStoryOption"
          }
        },
        {
          "name": "itemLink",
          "rwaccess": "readonly",
          "shortdesc": "The source file of the link.",
          "datatype": {
            "type": "Link"
          }
        },
        {
          "name": "incopyExportOptions",
          "rwaccess": "readonly",
          "shortdesc": "Export options for InCopy INCX document format.",
          "datatype": {
            "type": "InCopyExportOption"
          }
        },
        {
          "name": "allPageItems",
          "rwaccess": "readonly",
          "shortdesc": "Lists all page items contained by the Story.",
          "datatype": {
            "type": "PageItem",
            "array": true
          }
        },
        {
          "name": "allGraphics",
          "rwaccess": "readonly",
          "shortdesc": "Lists all graphics contained by the Story.",
          "datatype": {
            "type": "Graphic",
            "array": true
          }
        },
        {
          "name": "gridData",
          "rwaccess": "readonly",
          "shortdesc": "Default grid properties. Note: Applies to named, layout, and frame (story) grids.",
          "datatype": {
            "type": "GridDataInformation"
          }
        },
        {
          "name": "bulletChar",
          "rwaccess": "readonly",
          "shortdesc": "Bullet character.",
          "datatype": {
            "type": "Bullet"
          }
        },
        {
          "name": "numberingRestartPolicies",
          "rwaccess": "readonly",
          "shortdesc": "Numbering restart policies.",
          "datatype": {
            "type": "NumberingRestartPolicy"
          }
        },
        {
          "name": "lockState",
          "rwaccess": "readonly",
          "shortdesc": "The lock state.",
          "datatype": {
            "type": "LockStateValues"
          }
        },
        {
          "name": "id",
          "rwaccess": "readonly",
          "shortdesc": "The unique ID of the Story.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "isValid",
          "rwaccess": "readonly",
          "shortdesc": "Returns true if the object specifier resolves to valid objects.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "parent",
          "rwaccess": "readonly",
          "shortdesc": "The parent of the Story (a XMLElement or Document).",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "index",
          "rwaccess": "readonly",
          "shortdesc": "The index of the Story within its containing object.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "texts",
          "rwaccess": "readonly",
          "shortdesc": "A collection of text objects.",
          "datatype": {
            "type": "Texts"
          }
        },
        {
          "name": "characters",
          "rwaccess": "readonly",
          "shortdesc": "A collection of characters.",
          "datatype": {
            "type": "Characters"
          }
        },
        {
          "name": "words",
          "rwaccess": "readonly",
          "shortdesc": "A collection of words.",
          "datatype": {
            "type": "Words"
          }
        },
        {
          "name": "lines",
          "rwaccess": "readonly",
          "shortdesc": "A collection of lines.",
          "datatype": {
            "type": "Lines"
          }
        },
        {
          "name": "textColumns",
          "rwaccess": "readonly",
          "shortdesc": "A collection of text columns.",
          "datatype": {
            "type": "TextColumns"
          }
        },
        {
          "name": "paragraphs",
          "rwaccess": "readonly",
          "shortdesc": "A collection of paragraphs.",
          "datatype": {
            "type": "Paragraphs"
          }
        },
        {
          "name": "insertionPoints",
          "rwaccess": "readonly",
          "shortdesc": "A collection of insertion points.",
          "datatype": {
            "type": "InsertionPoints"
          }
        },
        {
          "name": "textStyleRanges",
          "rwaccess": "readonly",
          "shortdesc": "A collection of text style ranges.",
          "datatype": {
            "type": "TextStyleRanges"
          }
        },
        {
          "name": "preferences",
          "rwaccess": "readonly",
          "shortdesc": "A collection of preferences objects.",
          "datatype": {
            "type": "Preferences"
          }
        },
        {
          "name": "footnotes",
          "rwaccess": "readonly",
          "shortdesc": "A collection of footnotes.",
          "datatype": {
            "type": "Footnotes"
          }
        },
        {
          "name": "textVariableInstances",
          "rwaccess": "readonly",
          "shortdesc": "A collection of text variable instances.",
          "datatype": {
            "type": "TextVariableInstances"
          }
        },
        {
          "name": "nestedLineStyles",
          "rwaccess": "readonly",
          "shortdesc": "A collection of nested line styles.",
          "datatype": {
            "type": "NestedLineStyles"
          }
        },
        {
          "name": "nestedGrepStyles",
          "rwaccess": "readonly",
          "shortdesc": "A collection of nested GREP styles.",
          "datatype": {
            "type": "NestedGrepStyles"
          }
        },
        {
          "name": "nestedStyles",
          "rwaccess": "readonly",
          "shortdesc": "A collection of nested styles.",
          "datatype": {
            "type": "NestedStyles"
          }
        },
        {
          "name": "tabStops",
          "rwaccess": "readonly",
          "shortdesc": "A collection of tab stops.",
          "datatype": {
            "type": "TabStops"
          }
        },
        {
          "name": "tables",
          "rwaccess": "readonly",
          "shortdesc": "A collection of tables.",
          "datatype": {
            "type": "Tables"
          }
        },
        {
          "name": "ovals",
          "rwaccess": "readonly",
          "shortdesc": "A collection of ellipses.",
          "datatype": {
            "type": "Ovals"
          }
        },
        {
          "name": "splineItems",
          "rwaccess": "readonly",
          "shortdesc": "The spline items collection.",
          "datatype": {
            "type": "SplineItems"
          }
        },
        {
          "name": "pageItems",
          "rwaccess": "readonly",
          "shortdesc": "The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.",
          "datatype": {
            "type": "PageItems"
          }
        },
        {
          "name": "rectangles",
          "rwaccess": "readonly",
          "shortdesc": "A collection of rectangles.",
          "datatype": {
            "type": "Rectangles"
          }
        },
        {
          "name": "graphicLines",
          "rwaccess": "readonly",
          "shortdesc": "A collection of graphic lines.",
          "datatype": {
            "type": "GraphicLines"
          }
        },
        {
          "name": "textFrames",
          "rwaccess": "readonly",
          "shortdesc": "A collection of text frames.",
          "datatype": {
            "type": "TextFrames"
          }
        },
        {
          "name": "polygons",
          "rwaccess": "readonly",
          "shortdesc": "A collection of polygons.",
          "datatype": {
            "type": "Polygons"
          }
        },
        {
          "name": "paraStyleMappings",
          "rwaccess": "readonly",
          "shortdesc": "A collection of para style mappings.",
          "datatype": {
            "type": "ParaStyleMappings"
          }
        },
        {
          "name": "charStyleMappings",
          "rwaccess": "readonly",
          "shortdesc": "A collection of char style mappings.",
          "datatype": {
            "type": "CharStyleMappings"
          }
        },
        {
          "name": "tableStyleMappings",
          "rwaccess": "readonly",
          "shortdesc": "A collection of table style mappings.",
          "datatype": {
            "type": "TableStyleMappings"
          }
        },
        {
          "name": "cellStyleMappings",
          "rwaccess": "readonly",
          "shortdesc": "A collection of cell style mappings.",
          "datatype": {
            "type": "CellStyleMappings"
          }
        },
        {
          "name": "events",
          "rwaccess": "readonly",
          "shortdesc": "A collection of events.",
          "datatype": {
            "type": "Events"
          }
        },
        {
          "name": "eventListeners",
          "rwaccess": "readonly",
          "shortdesc": "A collection of event listeners.",
          "datatype": {
            "type": "EventListeners"
          }
        },
        {
          "name": "notes",
          "rwaccess": "readonly",
          "shortdesc": "A collection of notes.",
          "datatype": {
            "type": "Notes"
          }
        },
        {
          "name": "changes",
          "rwaccess": "readonly",
          "shortdesc": "A collection of changes.",
          "datatype": {
            "type": "Changes"
          }
        },
        {
          "name": "groups",
          "rwaccess": "readonly",
          "shortdesc": "A collection of groups.",
          "datatype": {
            "type": "Groups"
          }
        },
        {
          "name": "epstexts",
          "rwaccess": "readonly",
          "shortdesc": "EPSTexts",
          "datatype": {
            "type": "EPSTexts"
          }
        },
        {
          "name": "formFields",
          "rwaccess": "readonly",
          "shortdesc": "A collection of form fields.",
          "datatype": {
            "type": "FormFields"
          }
        },
        {
          "name": "buttons",
          "rwaccess": "readonly",
          "shortdesc": "A collection of buttons.",
          "datatype": {
            "type": "Buttons"
          }
        },
        {
          "name": "multiStateObjects",
          "rwaccess": "readonly",
          "shortdesc": "A collection of multi-state objects.",
          "datatype": {
            "type": "MultiStateObjects"
          }
        },
        {
          "name": "checkBoxes",
          "rwaccess": "readonly",
          "shortdesc": "A collection of checkboxes.",
          "datatype": {
            "type": "CheckBoxes"
          }
        },
        {
          "name": "comboBoxes",
          "rwaccess": "readonly",
          "shortdesc": "A collection of comboboxes.",
          "datatype": {
            "type": "ComboBoxes"
          }
        },
        {
          "name": "listBoxes",
          "rwaccess": "readonly",
          "shortdesc": "A collection of listboxes.",
          "datatype": {
            "type": "ListBoxes"
          }
        },
        {
          "name": "radioButtons",
          "rwaccess": "readonly",
          "shortdesc": "A collection of radio buttons.",
          "datatype": {
            "type": "RadioButtons"
          }
        },
        {
          "name": "textBoxes",
          "rwaccess": "readonly",
          "shortdesc": "A collection of text boxes.",
          "datatype": {
            "type": "TextBoxes"
          }
        },
        {
          "name": "signatureFields",
          "rwaccess": "readonly",
          "shortdesc": "A collection of signature fields.",
          "datatype": {
            "type": "SignatureFields"
          }
        },
        {
          "name": "hiddenTexts",
          "rwaccess": "readonly",
          "shortdesc": "A collection of hidden text objects.",
          "datatype": {
            "type": "HiddenTexts"
          }
        },
        {
          "name": "appliedFont",
          "shortdesc": "The font applied to the Story, specified as either a font object or the name of font family. Can return: Font or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "fontStyle",
          "shortdesc": "The name of the font style.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "pointSize",
          "shortdesc": "The text size.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "leading",
          "shortdesc": "The leading applied to the text. Can return: Unit or Leading enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kerningMethod",
          "shortdesc": "The type of pair kerning.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "tracking",
          "shortdesc": "The amount by which to loosen or tighten a block of text, specified in thousands of an em.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "capitalization",
          "shortdesc": "The capitalization scheme.",
          "datatype": {
            "type": "Capitalization"
          }
        },
        {
          "name": "position",
          "shortdesc": "The text position relative to the baseline.",
          "datatype": {
            "type": "Position"
          }
        },
        {
          "name": "underline",
          "shortdesc": "If true, underlines the text.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "strikeThru",
          "shortdesc": "If true, draws a strikethrough line through the text.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "ligatures",
          "shortdesc": "If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "noBreak",
          "shortdesc": "If true, keeps the text on the same line.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "horizontalScale",
          "shortdesc": "The horizontal scaling applied to the Story.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "verticalScale",
          "shortdesc": "The vertical scaling applied to the Story.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "baselineShift",
          "shortdesc": "The baseline shift applied to the text.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "skew",
          "shortdesc": "The skew angle of the Story.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "fillTint",
          "shortdesc": "The tint (as a percentage) of the fill color of the Story. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "strokeTint",
          "shortdesc": "The tint (as a percentage) of the stroke color of the Story. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "strokeWeight",
          "shortdesc": "The stroke weight applied to the characters of the text.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "overprintStroke",
          "shortdesc": "If true, the stroke of the characters will overprint.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "overprintFill",
          "shortdesc": "If true, the fill color of the characters will overprint.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfFigureStyle",
          "shortdesc": "The figure style in OpenType fonts.",
          "datatype": {
            "type": "OTFFigureStyle"
          }
        },
        {
          "name": "otfOrdinal",
          "shortdesc": "If true, uses ordinals in OpenType fonts.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfFraction",
          "shortdesc": "If true, uses fractions in OpenType fonts.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfDiscretionaryLigature",
          "shortdesc": "If true, uses discretionary ligatures in OpenType fonts.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfTitling",
          "shortdesc": "If true, uses titling forms in OpenType fonts.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfContextualAlternate",
          "shortdesc": "If true, uses contextual alternate forms in OpenType fonts.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfSwash",
          "shortdesc": "If true, uses swash forms in OpenType fonts.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "underlineColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. . Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineGapColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid. Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineTint",
          "shortdesc": "The underline stroke tint (as a percentage). (Range: 0 to 100)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "underlineGapTint",
          "shortdesc": "The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "underlineOverprint",
          "shortdesc": "If true, the underline stroke color will overprint.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "underlineGapOverprint",
          "shortdesc": "If true, the gap color of the underline stroke will overprint.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "underlineType",
          "shortdesc": "The stroke type of the underline stroke. Can return: StrokeStyle or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineOffset",
          "shortdesc": "The amount by which to offset the underline from the text baseline.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "underlineWeight",
          "shortdesc": "The stroke weight of the underline stroke.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke. Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughGapColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke. Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughTint",
          "shortdesc": "The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "strikeThroughGapTint",
          "shortdesc": "The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "strikeThroughOverprint",
          "shortdesc": "If true, the strikethrough stroke will overprint.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "strikeThroughGapOverprint",
          "shortdesc": "If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "strikeThroughType",
          "shortdesc": "The stroke type of the strikethrough stroke. Can return: StrokeStyle or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughOffset",
          "shortdesc": "The amount by which to offset the strikethrough stroke from the text baseline.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "strikeThroughWeight",
          "shortdesc": "The stroke weight of the strikethrough stroke.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "fillColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the fill of the Story. . Can also accept: String.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "strokeColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the Story. Can also accept: String.",
          "datatype": {
            "type": "Swatch"
          }
        },
        {
          "name": "appliedLanguage",
          "shortdesc": "The language of the text. Can return: LanguageWithVendors or Language. Can also accept: String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "paragraphKashidaWidth",
          "shortdesc": "Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "alignToBaseline",
          "shortdesc": "If true, aligns the baseline of the text to the baseline grid.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "firstLineIndent",
          "shortdesc": "The amount to indent the first line.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "leftIndent",
          "shortdesc": "The width of the left indent.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rightIndent",
          "shortdesc": "The width of the right indent.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "spaceBefore",
          "shortdesc": "The height of the paragraph space above.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "spaceAfter",
          "shortdesc": "The height of the paragraph space below.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "balanceRaggedLines",
          "shortdesc": "If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer. Can return: Boolean or BalanceLinesStyle enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "justification",
          "shortdesc": "The paragraph alignment.",
          "datatype": {
            "type": "Justification"
          }
        },
        {
          "name": "singleWordJustification",
          "shortdesc": "The alignment to use for lines that contain a single word.",
          "datatype": {
            "type": "SingleWordJustification"
          }
        },
        {
          "name": "autoLeading",
          "shortdesc": "The percent of the type size to use for auto leading. (Range: 0 to 500).",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "dropCapLines",
          "shortdesc": "The number of lines to drop cap.",
          "datatype": {
            "type": "Number",
            "min": 0,
            "max": 25
          }
        },
        {
          "name": "dropCapCharacters",
          "shortdesc": "The number of characters to drop cap.",
          "datatype": {
            "type": "Number",
            "min": 0,
            "max": 150
          }
        },
        {
          "name": "keepLinesTogether",
          "shortdesc": "If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "keepAllLinesTogether",
          "shortdesc": "If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "keepWithNext",
          "shortdesc": "The minimum number of lines to keep with the next paragraph.",
          "datatype": {
            "type": "Number",
            "min": 0,
            "max": 5
          }
        },
        {
          "name": "keepFirstLines",
          "shortdesc": "The minimum number of lines to keep together in a paragraph before allowing a page break.",
          "datatype": {
            "type": "Number",
            "min": 1,
            "max": 50
          }
        },
        {
          "name": "keepLastLines",
          "shortdesc": "The minimum number of lines to keep together in a paragraph after a page break.",
          "datatype": {
            "type": "Number",
            "min": 1,
            "max": 50
          }
        },
        {
          "name": "startParagraph",
          "shortdesc": "The location at which to start the paragraph.",
          "datatype": {
            "type": "StartParagraph"
          }
        },
        {
          "name": "composer",
          "shortdesc": "The text composer to use to compose the text.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "minimumWordSpacing",
          "shortdesc": "The minimum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "maximumWordSpacing",
          "shortdesc": "The maximum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "desiredWordSpacing",
          "shortdesc": "The desired word spacing, specified as a percentage of the font word space value. (Range: 0 to 1000)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "minimumLetterSpacing",
          "shortdesc": "The minimum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "maximumLetterSpacing",
          "shortdesc": "The maximum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "desiredLetterSpacing",
          "shortdesc": "The desired letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "minimumGlyphScaling",
          "shortdesc": "The minimum width (as a percentage) of individual characters. (Range: 50 to 200)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "maximumGlyphScaling",
          "shortdesc": "The maximum width (as a percentage) of individual characters. (Range: 50 to 200)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "desiredGlyphScaling",
          "shortdesc": "The desired width (as a percentage) of individual characters. (Range: 50 to 200)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "ruleAbove",
          "shortdesc": "If true, places a rule above the paragraph.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "ruleAboveOverprint",
          "shortdesc": "If true, the paragraph rule above will overprint.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "ruleAboveLineWeight",
          "shortdesc": "The line weight of the rule above.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleAboveTint",
          "shortdesc": "The tint (as a percentage) of the paragraph rule above. (Range: 0 to 100)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "ruleAboveOffset",
          "shortdesc": "The amount to offset the paragraph rule above from the baseline of the first line the paragraph.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleAboveLeftIndent",
          "shortdesc": "The distance to indent the left edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleAboveRightIndent",
          "shortdesc": "The distance to indent the right edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleAboveWidth",
          "shortdesc": "The basis (text width or column width) used to calculate the width of the paragraph rule above.",
          "datatype": {
            "type": "RuleWidth"
          }
        },
        {
          "name": "ruleAboveColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule above. Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleAboveGapColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule above. Note: Valid only when the paragraph rule above type is not solid. Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleAboveGapTint",
          "shortdesc": "The tint (as a percentage) of the stroke gap color of the paragraph rule. (Range: 0 to 100) Note: Valid only when the rule above type is not solid.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "ruleAboveGapOverprint",
          "shortdesc": "If true, the stroke gap of the paragraph rule above will overprint. Note: Valid only the rule above type is not solid.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "ruleAboveType",
          "shortdesc": "The stroke type of the rule above the paragraph. Can return: StrokeStyle or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleBelow",
          "shortdesc": "If true, applies a paragraph rule below.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "ruleBelowLineWeight",
          "shortdesc": "The line weight of the rule below.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleBelowTint",
          "shortdesc": "The tint (as a percentage) of the paragraph rule below. (Range: 0 to 100)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "ruleBelowOffset",
          "shortdesc": "The amount to offset the the paragraph rule below from the baseline of the last line of the paragraph.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleBelowLeftIndent",
          "shortdesc": "The distance to indent the left edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleBelowRightIndent",
          "shortdesc": "The distance to indent the right edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleBelowWidth",
          "shortdesc": "The basis (text width or column width) used to calculate the width of the paragraph rule below.",
          "datatype": {
            "type": "RuleWidth"
          }
        },
        {
          "name": "ruleBelowColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule below. Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleBelowGapColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule below. Note: Valid only when the paragraph rule below type is not solid. Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleBelowGapTint",
          "shortdesc": "The tint (as a percentage) of the stroke gap color of the paragraph rule below. (Range: 0 to 100) Note: Valid only when the paragraph rule below type is not solid.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "ruleBelowType",
          "shortdesc": "The stroke type of the rule below the paragraph. Can return: StrokeStyle or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "hyphenateCapitalizedWords",
          "shortdesc": "If true, allows hyphenation of capitalized words.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "hyphenation",
          "shortdesc": "If true, allows hyphenation.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "hyphenateBeforeLast",
          "shortdesc": "The minimum number of letters at the end of a word that can be broken by a hyphen.",
          "datatype": {
            "type": "Number",
            "min": 1,
            "max": 15
          }
        },
        {
          "name": "hyphenateAfterFirst",
          "shortdesc": "The mininum number of letters at the beginning of a word that can be broken by a hyphen.",
          "datatype": {
            "type": "Number",
            "min": 1,
            "max": 15
          }
        },
        {
          "name": "hyphenateWordsLongerThan",
          "shortdesc": "The minimum number of letters a word must have in order to qualify for hyphenation.",
          "datatype": {
            "type": "Number",
            "min": 3,
            "max": 25
          }
        },
        {
          "name": "hyphenateLadderLimit",
          "shortdesc": "The maximum number of hyphens that can appear on consecutive lines. To specify unlimited consecutive lines, use zero.",
          "datatype": {
            "type": "Number",
            "min": 0,
            "max": 25
          }
        },
        {
          "name": "hyphenationZone",
          "shortdesc": "The amount of white space allowed at the end of a line of non-justified text before hypenation begins. Note: Valid when composer is single-line composer.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "hyphenWeight",
          "shortdesc": "The relative desirability of better spacing vs. fewer hyphens. A lower value results in greater use of hyphens. (Range: 0 to 100)",
          "datatype": {
            "type": "Number",
            "min": 0,
            "max": 10
          }
        },
        {
          "name": "dropCapStyle",
          "shortdesc": "The character style to apply to the drop cap. Can also accept: String.",
          "datatype": {
            "type": "CharacterStyle"
          }
        },
        {
          "name": "contents",
          "shortdesc": "The contents of the text. Can return: String or SpecialCharacters enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "appliedParagraphStyle",
          "shortdesc": "The paragraph style applied to the text. Can also accept: String.",
          "datatype": {
            "type": "ParagraphStyle"
          }
        },
        {
          "name": "appliedCharacterStyle",
          "shortdesc": "The character style applied to the text. Can also accept: String.",
          "datatype": {
            "type": "CharacterStyle"
          }
        },
        {
          "name": "lastLineIndent",
          "shortdesc": "The amount to indent the last line in the paragraph.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "hyphenateLastWord",
          "shortdesc": "If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfSlashedZero",
          "shortdesc": "If true, use a slashed zeroes in OpenType fonts.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfHistorical",
          "shortdesc": "If true, use historical forms in OpenType fonts.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfStylisticSets",
          "shortdesc": "The stylistic sets to use in OpenType fonts.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "gradientFillLength",
          "shortdesc": "The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "gradientFillAngle",
          "shortdesc": "The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "gradientStrokeLength",
          "shortdesc": "The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "gradientStrokeAngle",
          "shortdesc": "The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "gradientFillStart",
          "shortdesc": "The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].",
          "datatype": {
            "type": "Mixed",
            "array": true
          }
        },
        {
          "name": "gradientStrokeStart",
          "shortdesc": "The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].",
          "datatype": {
            "type": "Mixed",
            "array": true
          }
        },
        {
          "name": "keepWithPrevious",
          "shortdesc": "If the first line in the paragraph should be kept with the last line of previous paragraph.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "spanSplitColumnCount",
          "shortdesc": "The number of columns a paragraph spans or the number of split columns. Can return: Short Integer (1 - 40) or SpanColumnCountOptions enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "spanColumnType",
          "shortdesc": "Whether a paragraph should be a single column, span columns or split columns",
          "datatype": {
            "type": "SpanColumnTypeOptions"
          }
        },
        {
          "name": "splitColumnInsideGutter",
          "shortdesc": "The inside gutter if the paragraph splits columns",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "splitColumnOutsideGutter",
          "shortdesc": "The outside gutter if the paragraph splits columns",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "spanColumnMinSpaceBefore",
          "shortdesc": "The minimum space before a span or a split column",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "spanColumnMinSpaceAfter",
          "shortdesc": "The minimum space after a span or a split column",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "ruleBelowOverprint",
          "shortdesc": "If true, the rule below will overprint.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "ruleBelowGapOverprint",
          "shortdesc": "If true, the gap color of the rule below will overprint.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "dropcapDetail",
          "shortdesc": "Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "hyphenateAcrossColumns",
          "shortdesc": "If true, allows the last word in a text column to be hyphenated.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "keepRuleAboveInFrame",
          "shortdesc": "If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "ignoreEdgeAlignment",
          "shortdesc": "If true, ignores optical edge alignment for the paragraph.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfMark",
          "shortdesc": "If true, uses mark positioning in OpenType fonts.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfLocale",
          "shortdesc": "If true, uses localized forms in OpenType fonts.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "positionalForm",
          "shortdesc": "The OpenType positional form.",
          "datatype": {
            "type": "PositionalForms"
          }
        },
        {
          "name": "paragraphDirection",
          "shortdesc": "Paragraph direction.",
          "datatype": {
            "type": "ParagraphDirectionOptions"
          }
        },
        {
          "name": "paragraphJustification",
          "shortdesc": "Paragraph justification.",
          "datatype": {
            "type": "ParagraphJustificationOptions"
          }
        },
        {
          "name": "miterLimit",
          "shortdesc": "The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.",
          "datatype": {
            "type": "Number",
            "min": 0,
            "max": 1000,
            "value": 4
          }
        },
        {
          "name": "strokeAlignment",
          "shortdesc": "The stroke alignment applied to the text.",
          "datatype": {
            "type": "TextStrokeAlign"
          }
        },
        {
          "name": "endJoin",
          "shortdesc": "The stroke join type applied to the characters of the text.",
          "datatype": {
            "type": "OutlineJoin"
          }
        },
        {
          "name": "otfOverlapSwash",
          "shortdesc": "If true, use overlapping swash forms in OpenType fonts",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfStylisticAlternate",
          "shortdesc": "If true, use stylistic alternate forms in OpenType fonts",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfJustificationAlternate",
          "shortdesc": "If true, use alternate justification forms in OpenType fonts",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfStretchedAlternate",
          "shortdesc": "If true, use stretched alternate forms in OpenType fonts",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "characterDirection",
          "shortdesc": "The direction of the character.",
          "datatype": {
            "type": "CharacterDirectionOptions"
          }
        },
        {
          "name": "keyboardDirection",
          "shortdesc": "The keyboard direction of the character.",
          "datatype": {
            "type": "CharacterDirectionOptions"
          }
        },
        {
          "name": "digitsType",
          "shortdesc": "The digits type.",
          "datatype": {
            "type": "DigitsTypeOptions"
          }
        },
        {
          "name": "kashidas",
          "shortdesc": "Use of Kashidas for justification",
          "datatype": {
            "type": "KashidasOptions"
          }
        },
        {
          "name": "diacriticPosition",
          "shortdesc": "Position of diacriticical characters.",
          "datatype": {
            "type": "DiacriticPositionOptions"
          }
        },
        {
          "name": "xOffsetDiacritic",
          "shortdesc": "The x (horizontal) offset for diacritic adjustment.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "yOffsetDiacritic",
          "shortdesc": "The y (vertical) offset for diacritic adjustment.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "tabList",
          "shortdesc": "A list of the tab stops in the paragraph. Can return: Array of Arrays of Property Name/Value Pairs.",
          "datatype": {
            "type": "Mixed",
            "array": true
          }
        },
        {
          "name": "idmlComponentName",
          "shortdesc": "The IDML component name of the Story.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "trackChanges",
          "shortdesc": "If true, track changes is turned on.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "storyTitle",
          "shortdesc": "Title for this InCopy story.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "appliedNamedGrid",
          "shortdesc": "The named grid in use.",
          "datatype": {
            "type": "NamedGrid"
          }
        },
        {
          "name": "opentypeFeatures",
          "shortdesc": "OpenType features. Can return: Array of Array of 2 Strings or Long Integers.",
          "datatype": {
            "type": "Mixed",
            "array": true
          }
        },
        {
          "name": "gridAlignFirstLineOnly",
          "shortdesc": "If true, aligns only the first line to the frame grid or baseline grid. If false, aligns all lines to the grid.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "gridAlignment",
          "shortdesc": "The alignment to the frame grid or baseline grid.",
          "datatype": {
            "type": "GridAlignment"
          }
        },
        {
          "name": "gridGyoudori",
          "shortdesc": "The manual gyoudori setting.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "autoTcy",
          "shortdesc": "The number of half-width characters at or below which the characters automatically run horizontally in vertical text.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "autoTcyIncludeRoman",
          "shortdesc": "If true, auto tcy includes Roman characters.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "kinsokuSet",
          "shortdesc": "The kinsoku set that determines legitimate line breaks. Can return: KinsokuTable, KinsokuSet enumerator or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kinsokuType",
          "shortdesc": "The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.",
          "datatype": {
            "type": "KinsokuType"
          }
        },
        {
          "name": "kinsokuHangType",
          "shortdesc": "The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.",
          "datatype": {
            "type": "KinsokuHangTypes"
          }
        },
        {
          "name": "bunriKinshi",
          "shortdesc": "If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "mojikumi",
          "shortdesc": "The mojikumi table. For information, see mojikumi table defaults. Can return: MojikumiTable, String or MojikumiTableDefaults enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rensuuji",
          "shortdesc": "If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "rotateSingleByteCharacters",
          "shortdesc": "If true, rotates Roman characters in vertical text.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "leadingModel",
          "shortdesc": "The point from which leading is measured from line to line.",
          "datatype": {
            "type": "LeadingModel"
          }
        },
        {
          "name": "characterAlignment",
          "shortdesc": "The alignment of small characters to the largest character in the line.",
          "datatype": {
            "type": "CharacterAlignment"
          }
        },
        {
          "name": "tsume",
          "shortdesc": "The amount of horizontal character compression.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "leadingAki",
          "shortdesc": "The amount of space before each character.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "trailingAki",
          "shortdesc": "The amount of space after each character.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "characterRotation",
          "shortdesc": "The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "jidori",
          "shortdesc": "The number of grid squares in which to arrange the text.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "shataiMagnification",
          "shortdesc": "The amount (as a percentage) of shatai obliquing to apply.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "shataiDegreeAngle",
          "shortdesc": "The shatai lens angle (in degrees).",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "shataiAdjustRotation",
          "shortdesc": "If true, applies shatai rotation.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "shataiAdjustTsume",
          "shortdesc": "If true, adjusts shatai tsume.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "tatechuyoko",
          "shortdesc": "If true, makes the character horizontal in vertical text.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "tatechuyokoXOffset",
          "shortdesc": "The horizontal offset for horizontal characters in vertical text.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "tatechuyokoYOffset",
          "shortdesc": "The vertical offset for horizontal characters in vertical text.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "kentenFillColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters. Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenStrokeColor",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters. Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenTint",
          "shortdesc": "The fill tint (as a percentage) of kenten characters. (Range: 0 to 100)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "kentenStrokeTint",
          "shortdesc": "The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "kentenWeight",
          "shortdesc": "The stroke weight (in points) of kenten characters.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "kentenOverprintFill",
          "shortdesc": "The method of overprinting the kenten fill.",
          "datatype": {
            "type": "AdornmentOverprint"
          }
        },
        {
          "name": "kentenOverprintStroke",
          "shortdesc": "The method of overprinting the kenten stroke.",
          "datatype": {
            "type": "AdornmentOverprint"
          }
        },
        {
          "name": "kentenKind",
          "shortdesc": "The style of kenten characters.",
          "datatype": {
            "type": "KentenCharacter"
          }
        },
        {
          "name": "kentenPlacement",
          "shortdesc": "The distance between kenten characters and their parent characters.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "kentenAlignment",
          "shortdesc": "The alignment of kenten characters relative to the parent characters.",
          "datatype": {
            "type": "KentenAlignment"
          }
        },
        {
          "name": "kentenPosition",
          "shortdesc": "The kenten position relative to the parent character.",
          "datatype": {
            "type": "RubyKentenPosition"
          }
        },
        {
          "name": "kentenFont",
          "shortdesc": "The font to use for kenten characters. Can return: Font or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenFontStyle",
          "shortdesc": "The font style of kenten characters. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "kentenFontSize",
          "shortdesc": "The size (in points) of kenten characters.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "kentenXScale",
          "shortdesc": "The horizontal size of kenten characters as a percent of the original size.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "kentenYScale",
          "shortdesc": "The vertical size of kenten charachers as a percent of the original size.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "kentenCustomCharacter",
          "shortdesc": "The character used for kenten. Note: Valid only when kenten kind is custom.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "kentenCharacterSet",
          "shortdesc": "The character set used for the custom kenten character. Note: Valid only when kenten kind is custom.",
          "datatype": {
            "type": "KentenCharacterSet"
          }
        },
        {
          "name": "rubyFill",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters. Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyStroke",
          "shortdesc": "The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters. Can return: Swatch or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyTint",
          "shortdesc": "The tint (as a percentage) of the ruby fill color. (Range: 0 to 100)",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "rubyWeight",
          "shortdesc": "The stroke weight (in points) of ruby characters.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "rubyOverprintFill",
          "shortdesc": "The method of overprinting the ruby fill.",
          "datatype": {
            "type": "AdornmentOverprint"
          }
        },
        {
          "name": "rubyOverprintStroke",
          "shortdesc": "The method of overprinting the ruby stroke.",
          "datatype": {
            "type": "AdornmentOverprint"
          }
        },
        {
          "name": "rubyStrokeTint",
          "shortdesc": "The stroke tint (as a percentage) of ruby characters.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "rubyFont",
          "shortdesc": "The font applied to ruby characters. Can return: Font or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyFontStyle",
          "shortdesc": "The font style of ruby characters. Can return: String or NothingEnum enumerator.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "rubyFontSize",
          "shortdesc": "The size (in points) of ruby characters.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "rubyOpenTypePro",
          "shortdesc": "If true, uses OpenType Pro fonts for ruby.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "rubyXScale",
          "shortdesc": "The horizontal size of ruby characters, specified as a percent of the original size.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "rubyYScale",
          "shortdesc": "The vertical size of ruby characters, specified as a percent of the original size.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "rubyType",
          "shortdesc": "The ruby type.",
          "datatype": {
            "type": "RubyTypes"
          }
        },
        {
          "name": "rubyAlignment",
          "shortdesc": "The ruby alignment.",
          "datatype": {
            "type": "RubyAlignments"
          }
        },
        {
          "name": "rubyPosition",
          "shortdesc": "The position of ruby characters relative to the parent text.",
          "datatype": {
            "type": "RubyKentenPosition"
          }
        },
        {
          "name": "rubyXOffset",
          "shortdesc": "The amount of horizontal space between ruby and parent characters.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "rubyYOffset",
          "shortdesc": "The amount of vertical space between ruby and parent characters.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "rubyParentSpacing",
          "shortdesc": "The ruby spacing relative to the parent text.",
          "datatype": {
            "type": "RubyParentSpacing"
          }
        },
        {
          "name": "rubyAutoAlign",
          "shortdesc": "If true, auto aligns ruby.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "rubyOverhang",
          "shortdesc": "If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "rubyAutoScaling",
          "shortdesc": "If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "rubyParentScalingPercent",
          "shortdesc": "The amount (as a percentage) to scale the parent text size to determine the ruby text size.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "rubyParentOverhangAmount",
          "shortdesc": "The amount by which ruby characters can overhang the parent text.",
          "datatype": {
            "type": "RubyOverhang"
          }
        },
        {
          "name": "warichu",
          "shortdesc": "If true, turns on warichu.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "warichuSize",
          "shortdesc": "The amount (as a percentage) to scale parent text size to determine warichu size.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "warichuLines",
          "shortdesc": "The number of lines of warichu within a single normal line.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "warichuLineSpacing",
          "shortdesc": "The gap between lines of warichu characters.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "warichuAlignment",
          "shortdesc": "The warichu alignment.",
          "datatype": {
            "type": "WarichuAlignment"
          }
        },
        {
          "name": "warichuCharsAfterBreak",
          "shortdesc": "The minimum number of characters allowed after a line break.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "warichuCharsBeforeBreak",
          "shortdesc": "The minimum number of characters allowed before a line break.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "otfProportionalMetrics",
          "shortdesc": "If true, kerns according to proportional CJK metrics in OpenType fonts.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfHVKana",
          "shortdesc": "If true, switches hiragana fonts, which have different glyphs for horizontal and vertical.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "otfRomanItalics",
          "shortdesc": "If true, applies italics to half-width alphanumerics.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "scaleAffectsLineHeight",
          "shortdesc": "If true, the line changes size when characters are scaled.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "cjkGridTracking",
          "shortdesc": "If true, uses grid tracking to track non-Roman characters in CJK grids.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "glyphForm",
          "shortdesc": "The glyph variant to substitute for standard glyphs.",
          "datatype": {
            "type": "AlternateGlyphForms"
          }
        },
        {
          "name": "rubyFlag",
          "shortdesc": "If true, ruby is on.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "rubyString",
          "shortdesc": "The ruby string contents.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "paragraphGyoudori",
          "shortdesc": "If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "rubyAutoTcyDigits",
          "shortdesc": "The number of digits included in auto tcy (tate-chuu-yoko) in ruby.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "rubyAutoTcyIncludeRoman",
          "shortdesc": "If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "rubyAutoTcyAutoScale",
          "shortdesc": "If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "treatIdeographicSpaceAsSpace",
          "shortdesc": "If true, ideographic spaces will not wrap to the next line like text characters.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "allowArbitraryHyphenation",
          "shortdesc": "If true, words unassociated with a hyphenation dictionary can break to the next line on any character.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "bulletsAndNumberingListType",
          "shortdesc": "List type for bullets and numbering.",
          "datatype": {
            "type": "ListType"
          }
        },
        {
          "name": "bulletsCharacterStyle",
          "shortdesc": "The character style to be used for the text after string. Can return: CharacterStyle or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingCharacterStyle",
          "shortdesc": "The character style to be used for the number string. Can return: CharacterStyle or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingExpression",
          "shortdesc": "The number string expression for numbering.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "bulletsTextAfter",
          "shortdesc": "The text after string expression for bullets.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "appliedNumberingList",
          "shortdesc": "The list to be part of. Can return: NumberingList or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingLevel",
          "shortdesc": "The level of the paragraph.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "numberingFormat",
          "shortdesc": "Numbering format options. Can return: NumberingStyle enumerator or String.",
          "datatype": {
            "type": "Mixed"
          }
        },
        {
          "name": "numberingContinue",
          "shortdesc": "Continue the numbering at this level.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "numberingStartAt",
          "shortdesc": "Determines starting number in a numbered list.",
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "numberingApplyRestartPolicy",
          "shortdesc": "If true, apply the numbering restart policy.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "bulletsAlignment",
          "shortdesc": "The alignment of the bullet character.",
          "datatype": {
            "type": "ListAlignment"
          }
        },
        {
          "name": "numberingAlignment",
          "shortdesc": "The alignment of the number.",
          "datatype": {
            "type": "ListAlignment"
          }
        },
        {
          "name": "label",
          "shortdesc": "A property that can be set to any string.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "name",
          "shortdesc": "The name of the Story; this is an alias to the Story's label property.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "properties",
          "shortdesc": "A property that allows setting of several properties at the same time.",
          "datatype": {
            "type": "Object"
          }
        }
      ],
      "method": [
        {
          "name": "placeXML",
          "shortdesc": "Places XML content into the specified object. Note: Replaces any existing content.",
          "parameters": [
            {
              "name": "using",
              "shortdesc": "The XML element whose content you want to place.",
              "datatype": {
                "type": "XMLElement"
              }
            }
          ]
        },
        {
          "name": "autoTag",
          "shortdesc": "Tag the object or the parent story using default tags defined in XML preference."
        },
        {
          "name": "markup",
          "shortdesc": "Associates the page item with the specified XML element while preserving existing content.",
          "parameters": [
            {
              "name": "using",
              "shortdesc": "The XML element.",
              "datatype": {
                "type": "XMLElement"
              }
            }
          ]
        },
        {
          "name": "changecase",
          "shortdesc": "Sets the case of the text.",
          "parameters": [
            {
              "name": "using",
              "shortdesc": "The text case option.",
              "datatype": {
                "type": "ChangecaseMode"
              }
            }
          ]
        },
        {
          "name": "clearOverrides",
          "shortdesc": "Clears the specified types of override.",
          "parameters": [
            {
              "name": "overridesToClear",
              "optional": true,
              "shortdesc": "The types of override to clear. ",
              "datatype": {
                "type": "OverrideType",
                "value": "OverrideType.ALL"
              }
            }
          ]
        },
        {
          "name": "recompose",
          "shortdesc": "Recomposes the text in the Story."
        },
        {
          "name": "remove",
          "shortdesc": "Deletes the Story."
        },
        {
          "name": "duplicate",
          "shortdesc": "Duplicates the text in the specified location.",
          "parameters": [
            {
              "name": "to",
              "shortdesc": "The location relative to the reference object or within the containing object.",
              "datatype": {
                "type": "LocationOptions"
              }
            },
            {
              "name": "reference",
              "shortdesc": "The reference object. Note: Required when the to parameter specifies before or after. Can accept: Text, Story, Cell, Row, Column, Table or PageItem. ",
              "datatype": {
                "type": "Mixed"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "Text"
          }
        },
        {
          "name": "move",
          "shortdesc": "Moves the text to the specified location.",
          "parameters": [
            {
              "name": "to",
              "shortdesc": "The location relative to the reference object or within the containing object.",
              "datatype": {
                "type": "LocationOptions"
              }
            },
            {
              "name": "reference",
              "shortdesc": "The reference object. Note: Required when the to parameter specifies before or after. Can accept: Text, Story, Cell, Row, Column, Table or PageItem. ",
              "datatype": {
                "type": "Mixed"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "Text"
          }
        },
        {
          "name": "findText",
          "shortdesc": "Finds text that matches the find what value.",
          "parameters": [
            {
              "name": "reverseOrder",
              "shortdesc": "If true, returns the results in reverse order. ",
              "datatype": {
                "type": "Boolean"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "Text",
            "array": true
          }
        },
        {
          "name": "changeText",
          "shortdesc": "Finds text that matches the find what value and replaces the text with the change to value.",
          "parameters": [
            {
              "name": "reverseOrder",
              "shortdesc": "If true, returns the results in reverse order. ",
              "datatype": {
                "type": "Boolean"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "Text",
            "array": true
          }
        },
        {
          "name": "findGrep",
          "shortdesc": "Finds text that matches the find what value.",
          "parameters": [
            {
              "name": "reverseOrder",
              "shortdesc": "If true, returns the results in reverse order. ",
              "datatype": {
                "type": "Boolean"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "Text",
            "array": true
          }
        },
        {
          "name": "changeGrep",
          "shortdesc": "Finds text that matches the find what value and replaces the text with the change to value.",
          "parameters": [
            {
              "name": "reverseOrder",
              "shortdesc": "If true, returns the results in reverse order. ",
              "datatype": {
                "type": "Boolean"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "Text",
            "array": true
          }
        },
        {
          "name": "findGlyph",
          "shortdesc": "Finds glyphs that match the find what value.",
          "parameters": [
            {
              "name": "reverseOrder",
              "shortdesc": "If true, returns the results in reverse order. ",
              "datatype": {
                "type": "Boolean"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "Text",
            "array": true
          }
        },
        {
          "name": "changeGlyph",
          "shortdesc": "Finds glyphs that match the find what value and replaces the glyphs with the change to value.",
          "parameters": [
            {
              "name": "reverseOrder",
              "shortdesc": "If true, returns the results in reverse order. ",
              "datatype": {
                "type": "Boolean"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "Text",
            "array": true
          }
        },
        {
          "name": "findTransliterate",
          "shortdesc": "Finds text that matches the find character type value.",
          "parameters": [
            {
              "name": "reverseOrder",
              "shortdesc": "If true, returns the results in reverse order. ",
              "datatype": {
                "type": "Boolean"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "Text",
            "array": true
          }
        },
        {
          "name": "changeTransliterate",
          "shortdesc": "Finds text that matches the find character type value and replaces the text with the change character type value.",
          "parameters": [
            {
              "name": "reverseOrder",
              "shortdesc": "If true, returns the results in reverse order. ",
              "datatype": {
                "type": "Boolean"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "Text",
            "array": true
          }
        },
        {
          "name": "storyEdit",
          "shortdesc": "Opens the story in a story editor window.",
          "datatype": {
            "type": "StoryWindow"
          }
        },
        {
          "name": "exportFile",
          "shortdesc": "Exports the object(s) to a file.",
          "parameters": [
            {
              "name": "format",
              "shortdesc": "The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog. Can accept: ExportFormat enumerator or String.",
              "datatype": {
                "type": "Mixed"
              }
            },
            {
              "name": "to",
              "shortdesc": "The path to the export file.",
              "datatype": {
                "type": "File"
              }
            },
            {
              "name": "showingOptions",
              "optional": true,
              "shortdesc": "If true, displays the export options dialog. ",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            },
            {
              "name": "using",
              "shortdesc": "The export style. ",
              "datatype": {
                "type": "PDFExportPreset"
              },
              "optional": true
            },
            {
              "name": "versionComments",
              "shortdesc": "The comment for this version. ",
              "datatype": {
                "type": "String"
              },
              "optional": true
            },
            {
              "name": "forceSave",
              "optional": true,
              "shortdesc": "If true, forcibly saves a version. ",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ]
        },
        {
          "name": "asynchronousExportFile",
          "shortdesc": "asynchronously exports the object(s) to a file.",
          "parameters": [
            {
              "name": "format",
              "shortdesc": "The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog. Can accept: ExportFormat enumerator or String.",
              "datatype": {
                "type": "Mixed"
              }
            },
            {
              "name": "to",
              "shortdesc": "The path to the export file.",
              "datatype": {
                "type": "File"
              }
            },
            {
              "name": "showingOptions",
              "optional": true,
              "shortdesc": "If true, displays the export options dialog. ",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            },
            {
              "name": "using",
              "shortdesc": "The export style. ",
              "datatype": {
                "type": "PDFExportPreset"
              },
              "optional": true
            },
            {
              "name": "versionComments",
              "shortdesc": "The comment for this version. ",
              "datatype": {
                "type": "String"
              },
              "optional": true
            },
            {
              "name": "forceSave",
              "optional": true,
              "shortdesc": "If true, forcibly saves a version. ",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "BackgroundTask"
          }
        },
        {
          "name": "convertBulletsAndNumberingToText",
          "shortdesc": "Convert bullets and numbering to text."
        },
        {
          "name": "createOutlines",
          "shortdesc": "Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.",
          "parameters": [
            {
              "name": "deleteOriginal",
              "optional": true,
              "shortdesc": "If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.  ",
              "datatype": {
                "type": "Boolean",
                "value": true
              }
            }
          ],
          "datatype": {
            "type": "PageItem",
            "array": true
          }
        },
        {
          "name": "checkOut",
          "shortdesc": "Checks out the story.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "checkIn",
          "shortdesc": "Checks in the story or stories.",
          "parameters": [
            {
              "name": "versionComments",
              "shortdesc": "The comment for this version. ",
              "datatype": {
                "type": "String"
              },
              "optional": true
            },
            {
              "name": "forceSave",
              "optional": true,
              "shortdesc": "If true, forcibly saves a version. ",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "revert",
          "shortdesc": "Reverts the document to its state at the last save operation.",
          "datatype": {
            "type": "Boolean"
          }
        },
        {
          "name": "insertLabel",
          "shortdesc": "Sets the label to the value associated with the specified key.",
          "parameters": [
            {
              "name": "key",
              "shortdesc": "The key.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "value",
              "shortdesc": "The value.",
              "datatype": {
                "type": "String"
              }
            }
          ]
        },
        {
          "name": "extractLabel",
          "shortdesc": "Gets the label value associated with the specified key.",
          "parameters": [
            {
              "name": "key",
              "shortdesc": "The key.",
              "datatype": {
                "type": "String"
              }
            }
          ],
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "toSource",
          "shortdesc": "Generates a string which, if executed, will return the Story.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "getElements",
          "shortdesc": "Resolves the object specifier, creating an array of object references.",
          "datatype": {
            "type": "Story",
            "array": true
          }
        },
        {
          "name": "toSpecifier",
          "shortdesc": "Retrieves the object specifier.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "addEventListener",
          "shortdesc": "Adds an event listener.",
          "parameters": [
            {
              "name": "eventType",
              "shortdesc": "The event type.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "handler",
              "shortdesc": "The event handler. Can accept: File or JavaScript Function.",
              "datatype": {
                "type": "Mixed"
              }
            },
            {
              "name": "captures",
              "optional": true,
              "shortdesc": "This parameter is obsolete. ",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "EventListener"
          }
        },
        {
          "name": "removeEventListener",
          "shortdesc": "Removes the event listener.",
          "parameters": [
            {
              "name": "eventType",
              "shortdesc": "The registered event type.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "handler",
              "shortdesc": "The registered event handler. Can accept: File or JavaScript Function.",
              "datatype": {
                "type": "Mixed"
              }
            },
            {
              "name": "captures",
              "optional": true,
              "shortdesc": "This parameter is obsolete. ",
              "datatype": {
                "type": "Boolean",
                "value": false
              }
            }
          ],
          "datatype": {
            "type": "Boolean"
          }
        }
      ]
    }
  ]
}