{
  "name": "String",
  "dynamic": true,
  "shortdesc": "A character string. Each character is adressable by index.",
  "elements": [
    {
      "type": "constructor",
      "method": [
        {
          "name": "String",
          "shortdesc": "Returns a string representation of the value given as an argument.",
          "parameters": [
            {
              "name": "value",
              "shortdesc": "A number, variable, or object to convert to a string.",
              "datatype": {
                "type": "any"
              }
            }
          ],
          "datatype": {
            "type": "String"
          },
          "example": "new String&amp;&#35;40;value&#41;"
        }
      ]
    },
    {
      "type": "class",
      "method": [
        {
          "name": "fromCharCode",
          "shortdesc": "Returns a string created by concatenation one or more characters specified as ASCII values.",
          "parameters": [
            {
              "name": "value1",
              "shortdesc": "One or more ASCII values.",
              "datatype": {
                "type": "Number"
              }
            }
          ],
          "datatype": {
            "type": "String"
          },
          "example": "String.fromCharCode&amp;&#35;40;value1,...valueN&#41;"
        }
      ]
    },
    {
      "type": "instance",
      "property": [
        {
          "name": "length",
          "rwaccess": "readonly",
          "shortdesc": "The length of the string.",
          "datatype": {
            "type": "Number"
          }
        }
      ],
      "method": [
        {
          "name": "toString",
          "shortdesc": "Returns itself.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "toSource",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "valueOf",
          "shortdesc": "Returns itself.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "charAt",
          "shortdesc": "Returns the character at the specified index.",
          "parameters": [
            {
              "name": "index",
              "shortdesc": "An integer between 0 and string.length -1, specifying the character to return.",
              "datatype": {
                "type": "Number"
              }
            }
          ],
          "datatype": {
            "type": "String"
          },
          "example": "string.charAt&amp;&#35;40;index&#41;"
        },
        {
          "name": "charCodeAt",
          "shortdesc": "Returns the Unicode value of the character at the given index.",
          "parameters": [
            {
              "name": "index",
              "shortdesc": "An integer between 0 and string.length -1, specifying the character.",
              "datatype": {
                "type": "Number"
              }
            }
          ],
          "datatype": {
            "type": "Number"
          },
          "example": "string.charCodeAt&amp;&#35;40;index&#41;"
        },
        {
          "name": "concat",
          "shortdesc": "If necessary, converts the one or more given values to strings.",
          "description": "Those values are concatenated with the original string, the result is returned. The original string is not effected.  Returns the concatenated string.",
          "parameters": [
            {
              "name": "value",
              "shortdesc": "The values to be concatenated with the given string.",
              "datatype": {
                "type": "String"
              }
            }
          ],
          "datatype": {
            "type": "String"
          },
          "example": "string.concat&amp;&#35;40;value1,...valueN&#41;"
        },
        {
          "name": "indexOf",
          "shortdesc": "Returns the index within the string of the first occurrence of the specified string, starting the search at fromIndex if provided.",
          "parameters": [
            {
              "name": "searchValue",
              "shortdesc": "The string for which to search.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "offset",
              "optional": true,
              "shortdesc": "The starting offset of the search.",
              "datatype": {
                "type": "Number"
              }
            }
          ],
          "datatype": {
            "type": "Number"
          },
          "example": "string.indexOf&amp;&#35;40;searchValue, fromIndex&#41;"
        },
        {
          "name": "lastIndexOf",
          "shortdesc": "Returns the index within the string of the last occurrence of the specified value.",
          "description": "The string is searched backward, starting at fromIndex.  Returns the index within the string where the last occurrence of searchValue was found, or -1 if it was not found.",
          "parameters": [
            {
              "name": "searchValue",
              "shortdesc": "The string for which to search.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "offset",
              "optional": true,
              "shortdesc": "The starting offset of the search.",
              "datatype": {
                "type": "Number"
              }
            }
          ],
          "datatype": {
            "type": "Number"
          },
          "example": "string.lastIndexOf&amp;&#35;40;searchValue, fromIndex&#41;"
        },
        {
          "name": "slice",
          "shortdesc": "Extracts a substring of the given string and returns it as a new string.",
          "description": "The substring begins at startSlice, and includes all characters up to, but not including the character at the index endSlice.   A negative value indexes from the end of the string.  For example, a negative value for startSlice is resolved as: string. length + startSlice.  The original string is unchanged.  Returns a substring of characters from the given string, starting at startSlice and ending with endSlice-1.",
          "parameters": [
            {
              "name": "startSlice",
              "shortdesc": "The index at which to begin extraction.",
              "datatype": {
                "type": "Number"
              }
            },
            {
              "name": "endSlice",
              "optional": true,
              "shortdesc": "The index at which to end extraction.",
              "description": "If omitted, slice extracts to the end of the string.",
              "datatype": {
                "type": "Number"
              }
            }
          ],
          "datatype": {
            "type": "String"
          },
          "example": "string.slice&amp;&#35;40;startSlice, endSlice&#41;"
        },
        {
          "name": "toLowerCase",
          "shortdesc": "Returns a new string which contains all the characters of the original string converted to lowercase.",
          "description": "The original string is unchanged.",
          "datatype": {
            "type": "String"
          },
          "example": "string.toLowerCase&amp;&#35;40;&#41;"
        },
        {
          "name": "toUpperCase",
          "shortdesc": "Returns a new string which contains all the characters of the original string converted to uppercase.",
          "description": "The original string is unchanged.",
          "datatype": {
            "type": "String"
          },
          "example": "string.toUpperCase&amp;&#35;40;&#41;"
        },
        {
          "name": "toLocaleLowerCase",
          "shortdesc": "Returns a new string which contains all the characters of the original string converted to lowercase (localized).",
          "description": "The original string is unchanged.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "toLocaleUpperCase",
          "shortdesc": "Returns a new string which contains all the characters of the original string converted to uppercase (localized).",
          "description": "The original string is unchanged.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "localeCompare",
          "shortdesc": "Performs a localized comparison of two strings.",
          "parameters": [
            {
              "name": "what",
              "shortdesc": "The string to compare with.",
              "datatype": {
                "type": "String"
              }
            }
          ],
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "match",
          "shortdesc": "Matches a string against a regular expression.",
          "parameters": [
            {
              "name": "regexp",
              "shortdesc": "The regular expression to use.",
              "datatype": {
                "type": "RegExp"
              }
            }
          ],
          "datatype": {
            "type": "Array"
          }
        },
        {
          "name": "replace",
          "parameters": [
            {
              "name": "what",
              "datatype": {
                "type": "any"
              }
            },
            {
              "name": "with",
              "datatype": {
                "type": "String"
              }
            }
          ],
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "search",
          "parameters": [
            {
              "name": "search",
              "datatype": {
                "type": "RegExp"
              }
            }
          ],
          "datatype": {
            "type": "Number"
          }
        },
        {
          "name": "split",
          "shortdesc": "Splits a string into a group of substrings, places those strings in an array, and returns the array.",
          "description": "The substrings are created by breaking the original string at places that match delimiter, the delimiter characters are removed.  Returns an array whose elements are the substrings.",
          "parameters": [
            {
              "name": "delimiter",
              "shortdesc": "Specifies the string to use for delimiting.",
              "description": "If delimiter is omitted, the array returned contains one element, consisting of the entire string.",
              "datatype": {
                "type": "String"
              }
            },
            {
              "name": "limit",
              "datatype": {
                "type": "Number"
              }
            }
          ],
          "datatype": {
            "type": "String"
          },
          "example": "string.split&amp;&#35;40;delimiter&#41;"
        },
        {
          "name": "substr",
          "shortdesc": "Returns a string containing the characters beginning at the specified index, start, through the specified number of characters.",
          "description": "The original string is unchanged.  Returns a string containing the extracted characters.",
          "parameters": [
            {
              "name": "start",
              "shortdesc": "Location at which to begin extracting characters.",
              "datatype": {
                "type": "Number"
              }
            },
            {
              "name": "length",
              "shortdesc": " The number of characters to extract.",
              "datatype": {
                "type": "Number"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "String"
          },
          "example": "string.substr&amp;&#35;40;start, length&#41;"
        },
        {
          "name": "substring",
          "shortdesc": "Returns a substring of the given string by extracting characters from indexA up to but not including indexB.",
          "description": "The original string is unchanged.  Returns a substring of characters from the given string, starting at indexA and ending with indexB-1.",
          "parameters": [
            {
              "name": "indexA",
              "shortdesc": "The index to begin extracting.",
              "datatype": {
                "type": "Number"
              }
            },
            {
              "name": "indexB",
              "shortdesc": " The index at which to end extraction.",
              "description": "If omitted, slice extracts to the end of the string.",
              "datatype": {
                "type": "Number"
              },
              "optional": true
            }
          ],
          "datatype": {
            "type": "String"
          },
          "example": "string.substring&amp;&#35;40;indexA, indexB&#41;"
        },
        {
          "name": "anchor",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;a&gt;tag.",
          "parameters": [
            {
              "name": "name",
              "shortdesc": "The text to be stored in the anchors' name attribute.",
              "datatype": {
                "type": "String"
              }
            }
          ],
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "big",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;big&gt;tag.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "blink",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;blink&gt;tag.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "bold",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;b&gt;tag.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "fixed",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;tt&gt;tag.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "fontcolor",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;font&gt;tag.",
          "parameters": [
            {
              "name": "color",
              "shortdesc": "The value to be stored in the tag's color attribute.",
              "datatype": {
                "type": "String"
              }
            }
          ],
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "fontsize",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;font&gt;tag.",
          "parameters": [
            {
              "name": "size",
              "shortdesc": "The value to be stored in the tag's size attribute.",
              "datatype": {
                "type": "Number"
              }
            }
          ],
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "italics",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;i&gt;tag.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "link",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;a&gt;tag.",
          "parameters": [
            {
              "name": "href",
              "shortdesc": "The value to be stored in the tag's href attribute.",
              "datatype": {
                "type": "String"
              }
            }
          ],
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "small",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;small&gt;tag.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "strike",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;strike&gt;tag.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "sub",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;sub&gt;tag.",
          "datatype": {
            "type": "String"
          }
        },
        {
          "name": "sup",
          "shortdesc": "Returns a string consisting of this string enclosed in a&lt;sup&gt;tag.",
          "datatype": {
            "type": "String"
          }
        }
      ]
    }
  ]
}